<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{34A3E42E-2254-4EE7-A152-EEDB18E3D7E3}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Roslynator</RootNamespace>
    <AssemblyName>Roslynator.Core</AssemblyName>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <TargetFrameworkVersion>v5.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\global.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\global.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>Roslynator.Core.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="CSharp\Analysis\BracesAnalysisResult.cs" />
    <Compile Include="CSharp\IMemberDeclarationComparer.cs" />
    <Compile Include="CSharp\IModifierComparer.cs" />
    <Compile Include="CSharp\CSharpUtility.cs" />
    <Compile Include="CSharp\Analysis\TypeAnalysisFlagsExtensions.cs" />
    <Compile Include="CSharp\Analysis\CSharpAnalysis.cs" />
    <Compile Include="CSharp\CSharpErrorCodes.cs" />
    <Compile Include="CSharp\Documentation\AddBaseOrNewDocumentationCommentRewriter.cs" />
    <Compile Include="CSharp\Documentation\BaseDocumentationCommentData.cs" />
    <Compile Include="CSharp\Documentation\DocumentationCommentInserter.cs" />
    <Compile Include="CSharp\Documentation\BaseDocumentationCommentOrigin.cs" />
    <Compile Include="CSharp\Extensions\DocumentExtensions.cs" />
    <Compile Include="CSharp\Refactorings\UseElementAccessInsteadOfElementAtRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseElementAccessInsteadOfFirstRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseElementAccessInsteadOfLastRefactoring.cs" />
    <Compile Include="CSharp\StatementContainer.cs" />
    <Compile Include="DirectiveRemoveOptions.cs" />
    <Compile Include="CSharp\Syntax\EqualsToNullExpression.cs" />
    <Compile Include="CSharp\Formatting\CSharpFormatter.cs" />
    <Compile Include="CSharp\Documentation\DocumentationCommentGenerator.cs" />
    <Compile Include="CSharp\Documentation\DocumentationCommentGeneratorSettings.cs" />
    <Compile Include="CSharp\EmbeddedStatementHelper.cs" />
    <Compile Include="CSharp\Comparers\EnumMemberValueComparer.cs" />
    <Compile Include="CSharp\Comparers\EnumMemberDeclarationNameComparer.cs" />
    <Compile Include="CSharp\Comparers\EnumMemberDeclarationValueComparer.cs" />
    <Compile Include="CSharp\Extensions\CSharpExtensions.cs" />
    <Compile Include="CSharp\CSharpGeneratedCodeAnalyzer.cs" />
    <Compile Include="CSharp\Extensions\SymbolExtensions.cs" />
    <Compile Include="CSharp\Formatting\BinaryExpressionToMultiLineRewriter.cs" />
    <Compile Include="CSharp\HexadecimalLiteralInfo.cs" />
    <Compile Include="CSharp\HexadecimalLiteralSuffixKind.cs" />
    <Compile Include="CSharp\Syntax\IfStatement.cs" />
    <Compile Include="CSharp\Syntax\IfStatementOrElseClause.cs" />
    <Compile Include="CSharp\Comparers\MemberDeclarationSortMode.cs" />
    <Compile Include="CSharp\Helpers\RemoveModifierHelper.cs" />
    <Compile Include="CSharp\Negator.cs" />
    <Compile Include="CSharp\Refactorings\AddBracesToSwitchSectionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\AddExceptionToDocumentationCommentAnalysis.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\AddExceptionToDocumentationCommentRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\ThrowExpressionInfo.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\ThrowInfo.cs" />
    <Compile Include="CSharp\Refactorings\AddExceptionToDocumentationComment\ThrowStatementInfo.cs" />
    <Compile Include="CSharp\Refactorings\AnalysisOptions.cs" />
    <Compile Include="CSharp\Refactorings\AnalysisOptionsExtensions.cs" />
    <Compile Include="CSharp\Refactorings\If\IfAnalysisOptions.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToAssignmentWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\AssignmentAndIfElseToAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\LocalDeclarationAndIfElseAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\If\IfRefactoringHelper.cs" />
    <Compile Include="CSharp\Refactorings\If\IfReturnToReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfReturnToReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfReturnToReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\ToAssignmentWithConditionalExpression`1.cs" />
    <Compile Include="CSharp\Refactorings\If\ToAssignmentWithConditionalExpression.cs" />
    <Compile Include="CSharp\Syntax\MemberInvocationStatement.cs" />
    <Compile Include="CSharp\Syntax\MemberInvocationExpressionWithSingleParameter.cs" />
    <Compile Include="CSharp\Syntax\LambdaExpressionWithSingleParameter.cs" />
    <Compile Include="CSharp\Syntax\NotEqualsToNullExpression.cs" />
    <Compile Include="CSharp\Syntax\SimpleAssignmentExpression.cs" />
    <Compile Include="CSharp\Refactorings\RefactoringKind.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfToReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfToReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfToReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToYieldReturnWithBooleanExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToYieldReturnWithCoalesceExpression.cs" />
    <Compile Include="CSharp\Refactorings\If\IfElseToYieldReturnWithConditionalExpression.cs" />
    <Compile Include="CSharp\Refactorings\InsertModifierRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ExpandExpressionBodyRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ExtractTypeDeclarationToNewDocumentRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\IntroduceFieldToLockOnRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\MarkContainingClassAsAbstractRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\MarkMemberAsStaticRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\MergeInterpolationIntoInterpolatedStringRefactoring.cs" />
    <Compile Include="CSharp\Helpers\RemoveCommentHelper.cs" />
    <Compile Include="CSharp\Refactorings\UseBitwiseOperationInsteadOfCallingHasFlagRefactoring.cs" />
    <Compile Include="CSharp\BinaryExpressionSlice.cs" />
    <Compile Include="CSharp\MemberDeclarationSlice.cs" />
    <Compile Include="CSharp\Syntax\SimpleAssignmentStatement.cs" />
    <Compile Include="CSharp\Syntax\SimpleIfStatementWithSingleStatement.cs" />
    <Compile Include="CSharp\StringExpressionChain.cs" />
    <Compile Include="CommentRemoveOptions.cs" />
    <Compile Include="CSharp\CSharpFactory.cs" />
    <Compile Include="CSharp\Helpers\DetermineParameterHelper.cs" />
    <Compile Include="CSharp\Extensions\SyntaxExtensions.cs" />
    <Compile Include="CSharp\AutoPropertyKind.cs" />
    <Compile Include="CSharp\Refactorings\CallConfigureAwaitRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseLambdaExpressionInsteadOfAnonymousMethodRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AddBracesToIfElseRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ExpandAssignmentExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseCompoundAssignmentRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\AttributeRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceForEachWithForRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\ReplaceInterpolatedStringWithStringLiteralRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\DuplicateMemberDeclarationRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\RemoveBracesFromIfElseElseRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseEmptyStringLiteralInsteadOfStringEmptyRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\SimplifyLambdaExpressionRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\SplitVariableDeclarationRefactoring.cs" />
    <Compile Include="CSharp\Refactorings\UseExpressionBodiedMemberRefactoring.cs" />
    <Compile Include="CSharp\Documentation\AddNewDocumentationCommentRewriter.cs" />
    <Compile Include="DefaultNames.cs" />
    <Compile Include="CSharp\Syntax\MemberInvocationExpression.cs" />
    <Compile Include="ExtensionMethodInfo.cs" />
    <Compile Include="ExtensionMethodKind.cs" />
    <Compile Include="Extensions\DiagnosticExtensions.cs" />
    <Compile Include="CodeFixes\Extensions\CodeFixContextExtensions.cs" />
    <Compile Include="Extensions\DocumentExtensions2.cs" />
    <Compile Include="FindSymbols\SymbolFinder.cs" />
    <Compile Include="FlagsUtility.cs" />
    <Compile Include="Deferred`1.cs" />
    <Compile Include="GlobalSuppressions.cs" />
    <Compile Include="MethodInfo.cs" />
    <Compile Include="SymbolUtility.cs" />
    <Compile Include="CSharp\SyntaxRewriters\CommentRemover.cs" />
    <Compile Include="CSharp\Refactorings\InlineAliasExpressionRefactoring.cs" />
    <Compile Include="CSharp\SyntaxRewriters\WhitespaceOrEndOfLineTriviaRemover.cs" />
    <Compile Include="CSharp\Analysis\TypeAnalysisFlags.cs" />
    <Compile Include="CSharp\Refactorings\ChangeTypeRefactoring.cs" />
    <Compile Include="CSharp\RemoveHelper.cs" />
    <Compile Include="CSharp\Comparers\MemberDeclarationComparer.cs" />
    <Compile Include="AsyncMethodNameGenerator.cs" />
    <Compile Include="NumberSuffixNameGenerator.cs" />
    <Compile Include="UnderscoreSuffixNameGenerator.cs" />
    <Compile Include="Diagnostics\AnalysisContextExtensions.cs" />
    <Compile Include="Extensions\DocumentExtensions.cs" />
    <Compile Include="Extensions\FileLinePositionSpanExtensions.cs" />
    <Compile Include="Extensions\SymbolExtensions.cs" />
    <Compile Include="Extensions\SemanticModelExtensions.cs" />
    <Compile Include="Text\Extensions\TextSpanExtensions.cs" />
    <Compile Include="Helpers\CreateNameFromTypeSymbolHelper.cs" />
    <Compile Include="MetadataNames.cs" />
    <Compile Include="CSharp\Modifiers.cs" />
    <Compile Include="NameGenerator.cs" />
    <Compile Include="Text\TextLineCollectionSlice.cs" />
    <Compile Include="CSharp\StatementContainerSlice.cs" />
    <Compile Include="ListSlice`1.cs" />
    <Compile Include="Rename\SymbolRenamer.cs" />
    <Compile Include="CSharp\Comparers\ModifierComparer.cs" />
    <Compile Include="Extensions\SyntaxExtensions.cs" />
    <Compile Include="Extensions\SyntaxTreeExtensions.cs" />
    <Compile Include="GeneratedCodeAnalyzer.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="CSharp\SyntaxRewriters\TriviaRemover.cs" />
    <Compile Include="SymbolDisplay.cs" />
    <Compile Include="StringUtility.cs" />
    <Compile Include="NameGenerators.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="project.json" />
    <None Include="Roslynator.Core.snk" />
    <None Include="Roslynator.Core.nuspec" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
  <Target Name="AfterBuild">
    <GetAssemblyIdentity AssemblyFiles="$(OutDir)\$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="AnalyzerAssemblyInfo" />
    </GetAssemblyIdentity>
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>