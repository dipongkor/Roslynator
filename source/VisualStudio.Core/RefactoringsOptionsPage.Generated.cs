// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System.Collections.Generic;
using System.ComponentModel;
using Roslynator.CSharp.Refactorings;
using Roslynator.VisualStudio.TypeConverters;

namespace Roslynator.VisualStudio
{
    public partial class RefactoringsOptionsPage
    {
        public RefactoringsOptionsPage()
        {
            AddBooleanComparison = true;
            AddBraces = true;
            AddBracesToIfElse = true;
            AddBracesToSwitchSection = true;
            AddBracesToSwitchSections = true;
            AddCastExpression = true;
            AddDefaultValueToParameter = true;
            AddDefaultValueToReturnStatement = true;
            AddExceptionToDocumentationComment = true;
            AddIdentifierToVariableDeclaration = true;
            AddParameterNameToArgument = true;
            AddParameterNameToParameter = true;
            AddUsingDirective = true;
            AddUsingStaticDirective = true;
            CallConfigureAwait = true;
            CallExtensionMethodAsInstanceMethod = true;
            CallToMethod = true;
            ChangeExplicitTypeToVar = true;
            ChangeMemberTypeAccordingToReturnExpression = true;
            ChangeMemberTypeAccordingToYieldReturnExpression = true;
            ChangeMethodReturnTypeToVoid = true;
            ChangeTypeAccordingToExpression = true;
            ChangeVarToExplicitType = true;
            CheckExpressionForNull = true;
            CheckParameterForNull = true;
            CollapseToInitializer = true;
            CommentOutMember = true;
            CommentOutStatement = true;
            CopyDocumentationCommentFromBaseMember = true;
            DuplicateArgument = true;
            DuplicateMember = true;
            DuplicateParameter = true;
            DuplicateStatement = true;
            ExpandAssignmentExpression = true;
            ExpandCoalesceExpression = true;
            ExpandEvent = true;
            ExpandExpressionBody = true;
            ExpandInitializer = true;
            ExpandLambdaExpressionBody = true;
            ExpandProperty = true;
            ExpandPropertyAndAddBackingField = true;
            ExtractDeclarationFromUsingStatement = true;
            ExtractExpressionFromCondition = true;
            ExtractGenericType = true;
            ExtractStatement = true;
            ExtractTypeDeclarationToNewFile = true;
            FormatAccessorBraces = true;
            FormatArgumentList = true;
            FormatBinaryExpression = true;
            FormatConditionalExpression = true;
            FormatExpressionChain = true;
            FormatInitializer = true;
            FormatParameterList = true;
            GenerateBaseConstructors = true;
            GenerateCombinedEnumMember = true;
            GenerateEnumMember = true;
            GenerateEnumValues = true;
            GenerateEventInvokingMethod = true;
            GenerateSwitchSections = true;
            InitializeLocalWithDefaultValue = true;
            InlineAliasExpression = true;
            InlineMethod = true;
            InsertStringInterpolation = true;
            IntroduceAndInitializeField = true;
            IntroduceAndInitializeProperty = true;
            IntroduceConstructor = false;
            IntroduceFieldToLockOn = true;
            IntroduceLocalFromStatementThatReturnsValue = true;
            MakeMemberAbstract = true;
            MakeMemberVirtual = true;
            MarkContainingClassAsAbstract = true;
            MarkMemberAsStatic = true;
            MergeAssignmentExpressionWithReturnStatement = true;
            MergeAttributes = true;
            MergeIfStatements = true;
            MergeInterpolationIntoInterpolatedString = true;
            MergeLocalDeclarations = true;
            MergeStringExpressions = true;
            NegateBinaryExpression = true;
            NegateBooleanLiteral = true;
            NegateIsExpression = true;
            NegateOperator = true;
            NotifyPropertyChanged = true;
            ParenthesizeExpression = true;
            PromoteLocalToParameter = true;
            RemoveAllComments = true;
            RemoveAllCommentsExceptDocumentationComments = true;
            RemoveAllDocumentationComments = false;
            RemoveAllMemberDeclarations = true;
            RemoveAllPreprocessorDirectives = true;
            RemoveAllRegionDirectives = true;
            RemoveAllStatements = true;
            RemoveAllSwitchSections = true;
            RemoveBraces = true;
            RemoveBracesFromIfElse = true;
            RemoveBracesFromSwitchSection = true;
            RemoveBracesFromSwitchSections = true;
            RemoveComment = true;
            RemoveConditionFromLastElse = true;
            RemoveDirectiveAndRelatedDirectives = true;
            RemoveEmptyLines = true;
            RemoveInterpolation = true;
            RemoveMember = true;
            RemoveMemberDeclarations = true;
            RemoveParameterNameFromArgument = true;
            RemoveParentheses = true;
            RemovePropertyInitializer = true;
            RemoveRegion = true;
            RemoveStatement = true;
            RemoveStatementsFromSwitchSections = true;
            RenameBackingFieldAccordingToPropertyName = true;
            RenameIdentifierAccordingToTypeName = true;
            RenameMethodAccordingToTypeName = true;
            RenameParameterAccordingToTypeName = true;
            RenamePropertyAccordingToTypeName = true;
            ReplaceAnyWithAllOrAllWithAny = true;
            ReplaceAsWithCast = true;
            ReplaceCastWithAs = true;
            ReplaceConditionalExpressionWithExpression = true;
            ReplaceConditionalExpressionWithIfElse = true;
            ReplaceConstantWithField = true;
            ReplaceCountWithLengthOrLengthWithCount = true;
            ReplaceDoStatementWithWhileStatement = true;
            ReplaceEqualsExpressionWithStringEquals = true;
            ReplaceEqualsExpressionWithStringIsNullOrEmpty = true;
            ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace = true;
            ReplaceExpressionWithConstantValue = true;
            ReplaceFieldWithConstant = true;
            ReplaceForEachWithFor = true;
            ReplaceForWithForEach = true;
            ReplaceForWithWhile = true;
            ReplaceHexadecimalLiteralWithDecimalLiteral = true;
            ReplaceIfElseWithSwitch = true;
            ReplaceIncrementOperatorWithDecrementOperator = true;
            ReplaceInterpolatedStringWithInterpolationExpression = true;
            ReplaceInterpolatedStringWithStringLiteral = true;
            ReplaceMethodGroupWithLambda = true;
            ReplaceMethodWithProperty = false;
            ReplaceNullLiteralExpressionWithDefaultExpression = true;
            ReplacePrefixOperatorWithPostfixOperator = true;
            ReplacePropertyWithMethod = true;
            ReplaceRegularStringLiteralWithVerbatimStringLiteral = true;
            ReplaceStatementWithIfStatement = true;
            ReplaceStringContainsWithStringIndexOf = true;
            ReplaceStringFormatWithInterpolatedString = true;
            ReplaceStringLiteralWithCharacterLiteral = true;
            ReplaceSwitchWithIfElse = true;
            ReplaceVerbatimStringLiteralWithRegularStringLiteral = true;
            ReplaceVerbatimStringLiteralWithRegularStringLiterals = true;
            ReplaceWhileStatementWithDoStatement = true;
            ReplaceWhileWithFor = true;
            ReverseForLoop = true;
            SimplifyIf = true;
            SimplifyLambdaExpression = true;
            SortMemberDeclarations = true;
            SplitAttributes = true;
            SplitSwitchLabels = true;
            SplitVariableDeclaration = true;
            SwapExpressionsInBinaryExpression = true;
            SwapExpressionsInConditionalExpression = true;
            SwapMemberDeclarations = true;
            SwapStatementsInIfElse = true;
            Uncomment = true;
            UseBitwiseOperationInsteadOfCallingHasFlag = true;
            UseCoalesceExpressionInsteadOfIf = true;
            UseConditionalExpressionInsteadOfIf = true;
            UseElementAccessInsteadOfEnumerableMethod = true;
            UseEmptyStringLiteralInsteadOfStringEmpty = true;
            UseExpressionBodiedMember = true;
            UseLambdaExpressionInsteadOfAnonymousMethod = true;
            UseStringEmptyInsteadOfEmptyStringLiteral = false;
            WrapInCondition = true;
            WrapInElseClause = true;
            WrapInIfDirective = true;
            WrapInRegion = true;
            WrapInTryCatch = true;
            WrapInUsingStatement = true;
            DisabledRefactorings = $"{RefactoringIdentifiers.IntroduceConstructor},{RefactoringIdentifiers.RemoveAllDocumentationComments},{RefactoringIdentifiers.ReplaceMethodWithProperty},{RefactoringIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral}";
        }

        public void MigrateValuesFromIdentifierProperties()
        {
            SetIsEnabled(RefactoringIdentifiers.AddBooleanComparison, AddBooleanComparison);
            SetIsEnabled(RefactoringIdentifiers.AddBraces, AddBraces);
            SetIsEnabled(RefactoringIdentifiers.AddBracesToIfElse, AddBracesToIfElse);
            SetIsEnabled(RefactoringIdentifiers.AddBracesToSwitchSection, AddBracesToSwitchSection);
            SetIsEnabled(RefactoringIdentifiers.AddBracesToSwitchSections, AddBracesToSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.AddCastExpression, AddCastExpression);
            SetIsEnabled(RefactoringIdentifiers.AddDefaultValueToParameter, AddDefaultValueToParameter);
            SetIsEnabled(RefactoringIdentifiers.AddDefaultValueToReturnStatement, AddDefaultValueToReturnStatement);
            SetIsEnabled(RefactoringIdentifiers.AddExceptionToDocumentationComment, AddExceptionToDocumentationComment);
            SetIsEnabled(RefactoringIdentifiers.AddIdentifierToVariableDeclaration, AddIdentifierToVariableDeclaration);
            SetIsEnabled(RefactoringIdentifiers.AddParameterNameToArgument, AddParameterNameToArgument);
            SetIsEnabled(RefactoringIdentifiers.AddParameterNameToParameter, AddParameterNameToParameter);
            SetIsEnabled(RefactoringIdentifiers.AddUsingDirective, AddUsingDirective);
            SetIsEnabled(RefactoringIdentifiers.AddUsingStaticDirective, AddUsingStaticDirective);
            SetIsEnabled(RefactoringIdentifiers.CallConfigureAwait, CallConfigureAwait);
            SetIsEnabled(RefactoringIdentifiers.CallExtensionMethodAsInstanceMethod, CallExtensionMethodAsInstanceMethod);
            SetIsEnabled(RefactoringIdentifiers.CallToMethod, CallToMethod);
            SetIsEnabled(RefactoringIdentifiers.ChangeExplicitTypeToVar, ChangeExplicitTypeToVar);
            SetIsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToReturnExpression, ChangeMemberTypeAccordingToReturnExpression);
            SetIsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToYieldReturnExpression, ChangeMemberTypeAccordingToYieldReturnExpression);
            SetIsEnabled(RefactoringIdentifiers.ChangeMethodReturnTypeToVoid, ChangeMethodReturnTypeToVoid);
            SetIsEnabled(RefactoringIdentifiers.ChangeTypeAccordingToExpression, ChangeTypeAccordingToExpression);
            SetIsEnabled(RefactoringIdentifiers.ChangeVarToExplicitType, ChangeVarToExplicitType);
            SetIsEnabled(RefactoringIdentifiers.CheckExpressionForNull, CheckExpressionForNull);
            SetIsEnabled(RefactoringIdentifiers.CheckParameterForNull, CheckParameterForNull);
            SetIsEnabled(RefactoringIdentifiers.CollapseToInitializer, CollapseToInitializer);
            SetIsEnabled(RefactoringIdentifiers.CommentOutMember, CommentOutMember);
            SetIsEnabled(RefactoringIdentifiers.CommentOutStatement, CommentOutStatement);
            SetIsEnabled(RefactoringIdentifiers.CopyDocumentationCommentFromBaseMember, CopyDocumentationCommentFromBaseMember);
            SetIsEnabled(RefactoringIdentifiers.DuplicateArgument, DuplicateArgument);
            SetIsEnabled(RefactoringIdentifiers.DuplicateMember, DuplicateMember);
            SetIsEnabled(RefactoringIdentifiers.DuplicateParameter, DuplicateParameter);
            SetIsEnabled(RefactoringIdentifiers.DuplicateStatement, DuplicateStatement);
            SetIsEnabled(RefactoringIdentifiers.ExpandAssignmentExpression, ExpandAssignmentExpression);
            SetIsEnabled(RefactoringIdentifiers.ExpandCoalesceExpression, ExpandCoalesceExpression);
            SetIsEnabled(RefactoringIdentifiers.ExpandEvent, ExpandEvent);
            SetIsEnabled(RefactoringIdentifiers.ExpandExpressionBody, ExpandExpressionBody);
            SetIsEnabled(RefactoringIdentifiers.ExpandInitializer, ExpandInitializer);
            SetIsEnabled(RefactoringIdentifiers.ExpandLambdaExpressionBody, ExpandLambdaExpressionBody);
            SetIsEnabled(RefactoringIdentifiers.ExpandProperty, ExpandProperty);
            SetIsEnabled(RefactoringIdentifiers.ExpandPropertyAndAddBackingField, ExpandPropertyAndAddBackingField);
            SetIsEnabled(RefactoringIdentifiers.ExtractDeclarationFromUsingStatement, ExtractDeclarationFromUsingStatement);
            SetIsEnabled(RefactoringIdentifiers.ExtractExpressionFromCondition, ExtractExpressionFromCondition);
            SetIsEnabled(RefactoringIdentifiers.ExtractGenericType, ExtractGenericType);
            SetIsEnabled(RefactoringIdentifiers.ExtractStatement, ExtractStatement);
            SetIsEnabled(RefactoringIdentifiers.ExtractTypeDeclarationToNewFile, ExtractTypeDeclarationToNewFile);
            SetIsEnabled(RefactoringIdentifiers.FormatAccessorBraces, FormatAccessorBraces);
            SetIsEnabled(RefactoringIdentifiers.FormatArgumentList, FormatArgumentList);
            SetIsEnabled(RefactoringIdentifiers.FormatBinaryExpression, FormatBinaryExpression);
            SetIsEnabled(RefactoringIdentifiers.FormatConditionalExpression, FormatConditionalExpression);
            SetIsEnabled(RefactoringIdentifiers.FormatExpressionChain, FormatExpressionChain);
            SetIsEnabled(RefactoringIdentifiers.FormatInitializer, FormatInitializer);
            SetIsEnabled(RefactoringIdentifiers.FormatParameterList, FormatParameterList);
            SetIsEnabled(RefactoringIdentifiers.GenerateBaseConstructors, GenerateBaseConstructors);
            SetIsEnabled(RefactoringIdentifiers.GenerateCombinedEnumMember, GenerateCombinedEnumMember);
            SetIsEnabled(RefactoringIdentifiers.GenerateEnumMember, GenerateEnumMember);
            SetIsEnabled(RefactoringIdentifiers.GenerateEnumValues, GenerateEnumValues);
            SetIsEnabled(RefactoringIdentifiers.GenerateEventInvokingMethod, GenerateEventInvokingMethod);
            SetIsEnabled(RefactoringIdentifiers.GenerateSwitchSections, GenerateSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.InitializeLocalWithDefaultValue, InitializeLocalWithDefaultValue);
            SetIsEnabled(RefactoringIdentifiers.InlineAliasExpression, InlineAliasExpression);
            SetIsEnabled(RefactoringIdentifiers.InlineMethod, InlineMethod);
            SetIsEnabled(RefactoringIdentifiers.InsertStringInterpolation, InsertStringInterpolation);
            SetIsEnabled(RefactoringIdentifiers.IntroduceAndInitializeField, IntroduceAndInitializeField);
            SetIsEnabled(RefactoringIdentifiers.IntroduceAndInitializeProperty, IntroduceAndInitializeProperty);
            SetIsEnabled(RefactoringIdentifiers.IntroduceConstructor, IntroduceConstructor);
            SetIsEnabled(RefactoringIdentifiers.IntroduceFieldToLockOn, IntroduceFieldToLockOn);
            SetIsEnabled(RefactoringIdentifiers.IntroduceLocalFromStatementThatReturnsValue, IntroduceLocalFromStatementThatReturnsValue);
            SetIsEnabled(RefactoringIdentifiers.MakeMemberAbstract, MakeMemberAbstract);
            SetIsEnabled(RefactoringIdentifiers.MakeMemberVirtual, MakeMemberVirtual);
            SetIsEnabled(RefactoringIdentifiers.MarkContainingClassAsAbstract, MarkContainingClassAsAbstract);
            SetIsEnabled(RefactoringIdentifiers.MarkMemberAsStatic, MarkMemberAsStatic);
            SetIsEnabled(RefactoringIdentifiers.MergeAssignmentExpressionWithReturnStatement, MergeAssignmentExpressionWithReturnStatement);
            SetIsEnabled(RefactoringIdentifiers.MergeAttributes, MergeAttributes);
            SetIsEnabled(RefactoringIdentifiers.MergeIfStatements, MergeIfStatements);
            SetIsEnabled(RefactoringIdentifiers.MergeInterpolationIntoInterpolatedString, MergeInterpolationIntoInterpolatedString);
            SetIsEnabled(RefactoringIdentifiers.MergeLocalDeclarations, MergeLocalDeclarations);
            SetIsEnabled(RefactoringIdentifiers.MergeStringExpressions, MergeStringExpressions);
            SetIsEnabled(RefactoringIdentifiers.NegateBinaryExpression, NegateBinaryExpression);
            SetIsEnabled(RefactoringIdentifiers.NegateBooleanLiteral, NegateBooleanLiteral);
            SetIsEnabled(RefactoringIdentifiers.NegateIsExpression, NegateIsExpression);
            SetIsEnabled(RefactoringIdentifiers.NegateOperator, NegateOperator);
            SetIsEnabled(RefactoringIdentifiers.NotifyPropertyChanged, NotifyPropertyChanged);
            SetIsEnabled(RefactoringIdentifiers.ParenthesizeExpression, ParenthesizeExpression);
            SetIsEnabled(RefactoringIdentifiers.PromoteLocalToParameter, PromoteLocalToParameter);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllComments, RemoveAllComments);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllCommentsExceptDocumentationComments, RemoveAllCommentsExceptDocumentationComments);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllDocumentationComments, RemoveAllDocumentationComments);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllMemberDeclarations, RemoveAllMemberDeclarations);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllPreprocessorDirectives, RemoveAllPreprocessorDirectives);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllRegionDirectives, RemoveAllRegionDirectives);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllStatements, RemoveAllStatements);
            SetIsEnabled(RefactoringIdentifiers.RemoveAllSwitchSections, RemoveAllSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.RemoveBraces, RemoveBraces);
            SetIsEnabled(RefactoringIdentifiers.RemoveBracesFromIfElse, RemoveBracesFromIfElse);
            SetIsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSection, RemoveBracesFromSwitchSection);
            SetIsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSections, RemoveBracesFromSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.RemoveComment, RemoveComment);
            SetIsEnabled(RefactoringIdentifiers.RemoveConditionFromLastElse, RemoveConditionFromLastElse);
            SetIsEnabled(RefactoringIdentifiers.RemoveDirectiveAndRelatedDirectives, RemoveDirectiveAndRelatedDirectives);
            SetIsEnabled(RefactoringIdentifiers.RemoveEmptyLines, RemoveEmptyLines);
            SetIsEnabled(RefactoringIdentifiers.RemoveInterpolation, RemoveInterpolation);
            SetIsEnabled(RefactoringIdentifiers.RemoveMember, RemoveMember);
            SetIsEnabled(RefactoringIdentifiers.RemoveMemberDeclarations, RemoveMemberDeclarations);
            SetIsEnabled(RefactoringIdentifiers.RemoveParameterNameFromArgument, RemoveParameterNameFromArgument);
            SetIsEnabled(RefactoringIdentifiers.RemoveParentheses, RemoveParentheses);
            SetIsEnabled(RefactoringIdentifiers.RemovePropertyInitializer, RemovePropertyInitializer);
            SetIsEnabled(RefactoringIdentifiers.RemoveRegion, RemoveRegion);
            SetIsEnabled(RefactoringIdentifiers.RemoveStatement, RemoveStatement);
            SetIsEnabled(RefactoringIdentifiers.RemoveStatementsFromSwitchSections, RemoveStatementsFromSwitchSections);
            SetIsEnabled(RefactoringIdentifiers.RenameBackingFieldAccordingToPropertyName, RenameBackingFieldAccordingToPropertyName);
            SetIsEnabled(RefactoringIdentifiers.RenameIdentifierAccordingToTypeName, RenameIdentifierAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.RenameMethodAccordingToTypeName, RenameMethodAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.RenameParameterAccordingToTypeName, RenameParameterAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.RenamePropertyAccordingToTypeName, RenamePropertyAccordingToTypeName);
            SetIsEnabled(RefactoringIdentifiers.ReplaceAnyWithAllOrAllWithAny, ReplaceAnyWithAllOrAllWithAny);
            SetIsEnabled(RefactoringIdentifiers.ReplaceAsWithCast, ReplaceAsWithCast);
            SetIsEnabled(RefactoringIdentifiers.ReplaceCastWithAs, ReplaceCastWithAs);
            SetIsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithExpression, ReplaceConditionalExpressionWithExpression);
            SetIsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithIfElse, ReplaceConditionalExpressionWithIfElse);
            SetIsEnabled(RefactoringIdentifiers.ReplaceConstantWithField, ReplaceConstantWithField);
            SetIsEnabled(RefactoringIdentifiers.ReplaceCountWithLengthOrLengthWithCount, ReplaceCountWithLengthOrLengthWithCount);
            SetIsEnabled(RefactoringIdentifiers.ReplaceDoStatementWithWhileStatement, ReplaceDoStatementWithWhileStatement);
            SetIsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringEquals, ReplaceEqualsExpressionWithStringEquals);
            SetIsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrEmpty, ReplaceEqualsExpressionWithStringIsNullOrEmpty);
            SetIsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace, ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace);
            SetIsEnabled(RefactoringIdentifiers.ReplaceExpressionWithConstantValue, ReplaceExpressionWithConstantValue);
            SetIsEnabled(RefactoringIdentifiers.ReplaceFieldWithConstant, ReplaceFieldWithConstant);
            SetIsEnabled(RefactoringIdentifiers.ReplaceForEachWithFor, ReplaceForEachWithFor);
            SetIsEnabled(RefactoringIdentifiers.ReplaceForWithForEach, ReplaceForWithForEach);
            SetIsEnabled(RefactoringIdentifiers.ReplaceForWithWhile, ReplaceForWithWhile);
            SetIsEnabled(RefactoringIdentifiers.ReplaceHexadecimalLiteralWithDecimalLiteral, ReplaceHexadecimalLiteralWithDecimalLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceIfElseWithSwitch, ReplaceIfElseWithSwitch);
            SetIsEnabled(RefactoringIdentifiers.ReplaceIncrementOperatorWithDecrementOperator, ReplaceIncrementOperatorWithDecrementOperator);
            SetIsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithInterpolationExpression, ReplaceInterpolatedStringWithInterpolationExpression);
            SetIsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithStringLiteral, ReplaceInterpolatedStringWithStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceMethodGroupWithLambda, ReplaceMethodGroupWithLambda);
            SetIsEnabled(RefactoringIdentifiers.ReplaceMethodWithProperty, ReplaceMethodWithProperty);
            SetIsEnabled(RefactoringIdentifiers.ReplaceNullLiteralExpressionWithDefaultExpression, ReplaceNullLiteralExpressionWithDefaultExpression);
            SetIsEnabled(RefactoringIdentifiers.ReplacePrefixOperatorWithPostfixOperator, ReplacePrefixOperatorWithPostfixOperator);
            SetIsEnabled(RefactoringIdentifiers.ReplacePropertyWithMethod, ReplacePropertyWithMethod);
            SetIsEnabled(RefactoringIdentifiers.ReplaceRegularStringLiteralWithVerbatimStringLiteral, ReplaceRegularStringLiteralWithVerbatimStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceStatementWithIfStatement, ReplaceStatementWithIfStatement);
            SetIsEnabled(RefactoringIdentifiers.ReplaceStringContainsWithStringIndexOf, ReplaceStringContainsWithStringIndexOf);
            SetIsEnabled(RefactoringIdentifiers.ReplaceStringFormatWithInterpolatedString, ReplaceStringFormatWithInterpolatedString);
            SetIsEnabled(RefactoringIdentifiers.ReplaceStringLiteralWithCharacterLiteral, ReplaceStringLiteralWithCharacterLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceSwitchWithIfElse, ReplaceSwitchWithIfElse);
            SetIsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiteral, ReplaceVerbatimStringLiteralWithRegularStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiterals, ReplaceVerbatimStringLiteralWithRegularStringLiterals);
            SetIsEnabled(RefactoringIdentifiers.ReplaceWhileStatementWithDoStatement, ReplaceWhileStatementWithDoStatement);
            SetIsEnabled(RefactoringIdentifiers.ReplaceWhileWithFor, ReplaceWhileWithFor);
            SetIsEnabled(RefactoringIdentifiers.ReverseForLoop, ReverseForLoop);
            SetIsEnabled(RefactoringIdentifiers.SimplifyIf, SimplifyIf);
            SetIsEnabled(RefactoringIdentifiers.SimplifyLambdaExpression, SimplifyLambdaExpression);
            SetIsEnabled(RefactoringIdentifiers.SortMemberDeclarations, SortMemberDeclarations);
            SetIsEnabled(RefactoringIdentifiers.SplitAttributes, SplitAttributes);
            SetIsEnabled(RefactoringIdentifiers.SplitSwitchLabels, SplitSwitchLabels);
            SetIsEnabled(RefactoringIdentifiers.SplitVariableDeclaration, SplitVariableDeclaration);
            SetIsEnabled(RefactoringIdentifiers.SwapExpressionsInBinaryExpression, SwapExpressionsInBinaryExpression);
            SetIsEnabled(RefactoringIdentifiers.SwapExpressionsInConditionalExpression, SwapExpressionsInConditionalExpression);
            SetIsEnabled(RefactoringIdentifiers.SwapMemberDeclarations, SwapMemberDeclarations);
            SetIsEnabled(RefactoringIdentifiers.SwapStatementsInIfElse, SwapStatementsInIfElse);
            SetIsEnabled(RefactoringIdentifiers.Uncomment, Uncomment);
            SetIsEnabled(RefactoringIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag, UseBitwiseOperationInsteadOfCallingHasFlag);
            SetIsEnabled(RefactoringIdentifiers.UseCoalesceExpressionInsteadOfIf, UseCoalesceExpressionInsteadOfIf);
            SetIsEnabled(RefactoringIdentifiers.UseConditionalExpressionInsteadOfIf, UseConditionalExpressionInsteadOfIf);
            SetIsEnabled(RefactoringIdentifiers.UseElementAccessInsteadOfEnumerableMethod, UseElementAccessInsteadOfEnumerableMethod);
            SetIsEnabled(RefactoringIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty, UseEmptyStringLiteralInsteadOfStringEmpty);
            SetIsEnabled(RefactoringIdentifiers.UseExpressionBodiedMember, UseExpressionBodiedMember);
            SetIsEnabled(RefactoringIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod, UseLambdaExpressionInsteadOfAnonymousMethod);
            SetIsEnabled(RefactoringIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral, UseStringEmptyInsteadOfEmptyStringLiteral);
            SetIsEnabled(RefactoringIdentifiers.WrapInCondition, WrapInCondition);
            SetIsEnabled(RefactoringIdentifiers.WrapInElseClause, WrapInElseClause);
            SetIsEnabled(RefactoringIdentifiers.WrapInIfDirective, WrapInIfDirective);
            SetIsEnabled(RefactoringIdentifiers.WrapInRegion, WrapInRegion);
            SetIsEnabled(RefactoringIdentifiers.WrapInTryCatch, WrapInTryCatch);
            SetIsEnabled(RefactoringIdentifiers.WrapInUsingStatement, WrapInUsingStatement);
        }

        public static void SetRefactoringsDisabledByDefault(RefactoringSettings settings)
        {
            settings.DisableRefactoring(RefactoringIdentifiers.IntroduceConstructor);
            settings.DisableRefactoring(RefactoringIdentifiers.RemoveAllDocumentationComments);
            settings.DisableRefactoring(RefactoringIdentifiers.ReplaceMethodWithProperty);
            settings.DisableRefactoring(RefactoringIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral);
        }

        public void Fill(ICollection<RefactoringModel> refactorings)
        {
            refactorings.Clear();
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddBooleanComparison, "Add boolean comparison", IsEnabled(RefactoringIdentifiers.AddBooleanComparison)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddBraces, "Add braces", IsEnabled(RefactoringIdentifiers.AddBraces)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddBracesToIfElse, "Add braces to if-else", IsEnabled(RefactoringIdentifiers.AddBracesToIfElse)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddBracesToSwitchSection, "Add braces to switch section", IsEnabled(RefactoringIdentifiers.AddBracesToSwitchSection)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddBracesToSwitchSections, "Add braces to switch sections", IsEnabled(RefactoringIdentifiers.AddBracesToSwitchSections)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddCastExpression, "Add cast expression", IsEnabled(RefactoringIdentifiers.AddCastExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddDefaultValueToParameter, "Add default value to parameter", IsEnabled(RefactoringIdentifiers.AddDefaultValueToParameter)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddDefaultValueToReturnStatement, "Add default value to return statement", IsEnabled(RefactoringIdentifiers.AddDefaultValueToReturnStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddExceptionToDocumentationComment, "Add exception to documentation comment", IsEnabled(RefactoringIdentifiers.AddExceptionToDocumentationComment)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddIdentifierToVariableDeclaration, "Add identifier to variable declaration", IsEnabled(RefactoringIdentifiers.AddIdentifierToVariableDeclaration)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddParameterNameToArgument, "Add parameter name to argument", IsEnabled(RefactoringIdentifiers.AddParameterNameToArgument)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddParameterNameToParameter, "Add parameter name to parameter", IsEnabled(RefactoringIdentifiers.AddParameterNameToParameter)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddUsingDirective, "Add using directive", IsEnabled(RefactoringIdentifiers.AddUsingDirective)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddUsingStaticDirective, "Add using static directive", IsEnabled(RefactoringIdentifiers.AddUsingStaticDirective)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CallConfigureAwait, "Call 'ConfigureAwait(false)'", IsEnabled(RefactoringIdentifiers.CallConfigureAwait)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CallExtensionMethodAsInstanceMethod, "Call extension method as instance method", IsEnabled(RefactoringIdentifiers.CallExtensionMethodAsInstanceMethod)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CallToMethod, "Call 'To...' method (ToString, ToArray, ToList)", IsEnabled(RefactoringIdentifiers.CallToMethod)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ChangeExplicitTypeToVar, "Change explicit type to 'var'", IsEnabled(RefactoringIdentifiers.ChangeExplicitTypeToVar)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ChangeMemberTypeAccordingToReturnExpression, "Change method/property/indexer type according to return expression", IsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToReturnExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ChangeMemberTypeAccordingToYieldReturnExpression, "Change method/property/indexer type according to yield return expression", IsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToYieldReturnExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ChangeMethodReturnTypeToVoid, "Change method return type to 'void'", IsEnabled(RefactoringIdentifiers.ChangeMethodReturnTypeToVoid)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ChangeTypeAccordingToExpression, "Change type according to expression", IsEnabled(RefactoringIdentifiers.ChangeTypeAccordingToExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ChangeVarToExplicitType, "Change 'var' to explicit type", IsEnabled(RefactoringIdentifiers.ChangeVarToExplicitType)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CheckExpressionForNull, "Check expression for null", IsEnabled(RefactoringIdentifiers.CheckExpressionForNull)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CheckParameterForNull, "Check parameter for null", IsEnabled(RefactoringIdentifiers.CheckParameterForNull)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CollapseToInitializer, "Collapse to initalizer", IsEnabled(RefactoringIdentifiers.CollapseToInitializer)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CommentOutMember, "Comment out member", IsEnabled(RefactoringIdentifiers.CommentOutMember)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CommentOutStatement, "Comment out statement", IsEnabled(RefactoringIdentifiers.CommentOutStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.CopyDocumentationCommentFromBaseMember, "Copy documentation comment from base member", IsEnabled(RefactoringIdentifiers.CopyDocumentationCommentFromBaseMember)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.DuplicateArgument, "Duplicate argument", IsEnabled(RefactoringIdentifiers.DuplicateArgument)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.DuplicateMember, "Duplicate member", IsEnabled(RefactoringIdentifiers.DuplicateMember)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.DuplicateParameter, "Duplicate parameter", IsEnabled(RefactoringIdentifiers.DuplicateParameter)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.DuplicateStatement, "Duplicate statement", IsEnabled(RefactoringIdentifiers.DuplicateStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandAssignmentExpression, "Expand assignment expression", IsEnabled(RefactoringIdentifiers.ExpandAssignmentExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandCoalesceExpression, "Expand coalesce expression", IsEnabled(RefactoringIdentifiers.ExpandCoalesceExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandEvent, "Expand event", IsEnabled(RefactoringIdentifiers.ExpandEvent)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandExpressionBody, "Expand expression body", IsEnabled(RefactoringIdentifiers.ExpandExpressionBody)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandInitializer, "Expand initializer", IsEnabled(RefactoringIdentifiers.ExpandInitializer)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandLambdaExpressionBody, "Expand lambda expression body", IsEnabled(RefactoringIdentifiers.ExpandLambdaExpressionBody)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandProperty, "Expand property", IsEnabled(RefactoringIdentifiers.ExpandProperty)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExpandPropertyAndAddBackingField, "Expand property and add backing field", IsEnabled(RefactoringIdentifiers.ExpandPropertyAndAddBackingField)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExtractDeclarationFromUsingStatement, "Extract declaration from using statement", IsEnabled(RefactoringIdentifiers.ExtractDeclarationFromUsingStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExtractExpressionFromCondition, "Extract expression from condition", IsEnabled(RefactoringIdentifiers.ExtractExpressionFromCondition)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExtractGenericType, "Extract generic type", IsEnabled(RefactoringIdentifiers.ExtractGenericType)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExtractStatement, "Extract statement(s)", IsEnabled(RefactoringIdentifiers.ExtractStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ExtractTypeDeclarationToNewFile, "Extract type declaration to a new file", IsEnabled(RefactoringIdentifiers.ExtractTypeDeclarationToNewFile)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.FormatAccessorBraces, "Format accessor braces", IsEnabled(RefactoringIdentifiers.FormatAccessorBraces)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.FormatArgumentList, "Format argument list", IsEnabled(RefactoringIdentifiers.FormatArgumentList)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.FormatBinaryExpression, "Format binary expression", IsEnabled(RefactoringIdentifiers.FormatBinaryExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.FormatConditionalExpression, "Format conditional expression", IsEnabled(RefactoringIdentifiers.FormatConditionalExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.FormatExpressionChain, "Format expression chain", IsEnabled(RefactoringIdentifiers.FormatExpressionChain)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.FormatInitializer, "Format initializer", IsEnabled(RefactoringIdentifiers.FormatInitializer)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.FormatParameterList, "Format parameter list", IsEnabled(RefactoringIdentifiers.FormatParameterList)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.GenerateBaseConstructors, "Generate base constructors", IsEnabled(RefactoringIdentifiers.GenerateBaseConstructors)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.GenerateCombinedEnumMember, "Generate combined enum member", IsEnabled(RefactoringIdentifiers.GenerateCombinedEnumMember)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.GenerateEnumMember, "Generate enum member", IsEnabled(RefactoringIdentifiers.GenerateEnumMember)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.GenerateEnumValues, "Generate enum values", IsEnabled(RefactoringIdentifiers.GenerateEnumValues)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.GenerateEventInvokingMethod, "Generate event invoking method", IsEnabled(RefactoringIdentifiers.GenerateEventInvokingMethod)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.GenerateSwitchSections, "Generate switch sections", IsEnabled(RefactoringIdentifiers.GenerateSwitchSections)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.InitializeLocalWithDefaultValue, "Initialize local with default value", IsEnabled(RefactoringIdentifiers.InitializeLocalWithDefaultValue)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.InlineAliasExpression, "Inline alias expression", IsEnabled(RefactoringIdentifiers.InlineAliasExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.InlineMethod, "Inline method", IsEnabled(RefactoringIdentifiers.InlineMethod)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.InsertStringInterpolation, "Insert string interpolation", IsEnabled(RefactoringIdentifiers.InsertStringInterpolation)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.IntroduceAndInitializeField, "Introduce and initialize field", IsEnabled(RefactoringIdentifiers.IntroduceAndInitializeField)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.IntroduceAndInitializeProperty, "Introduce and initialize property", IsEnabled(RefactoringIdentifiers.IntroduceAndInitializeProperty)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.IntroduceConstructor, "Introduce constructor", IsEnabled(RefactoringIdentifiers.IntroduceConstructor)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.IntroduceFieldToLockOn, "Introduce field to lock on", IsEnabled(RefactoringIdentifiers.IntroduceFieldToLockOn)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.IntroduceLocalFromStatementThatReturnsValue, "Introduce local from statement that returns value", IsEnabled(RefactoringIdentifiers.IntroduceLocalFromStatementThatReturnsValue)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MakeMemberAbstract, "Make member abstract", IsEnabled(RefactoringIdentifiers.MakeMemberAbstract)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MakeMemberVirtual, "Make member virtual", IsEnabled(RefactoringIdentifiers.MakeMemberVirtual)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MarkContainingClassAsAbstract, "Mark containing class as abstract", IsEnabled(RefactoringIdentifiers.MarkContainingClassAsAbstract)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MarkMemberAsStatic, "Mark member as static", IsEnabled(RefactoringIdentifiers.MarkMemberAsStatic)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MergeAssignmentExpressionWithReturnStatement, "Merge assignment expression with return statement", IsEnabled(RefactoringIdentifiers.MergeAssignmentExpressionWithReturnStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MergeAttributes, "Merge attributes", IsEnabled(RefactoringIdentifiers.MergeAttributes)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MergeIfStatements, "Merge if statements", IsEnabled(RefactoringIdentifiers.MergeIfStatements)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MergeInterpolationIntoInterpolatedString, "Merge interpolation into interpolated string", IsEnabled(RefactoringIdentifiers.MergeInterpolationIntoInterpolatedString)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MergeLocalDeclarations, "Merge local declarations", IsEnabled(RefactoringIdentifiers.MergeLocalDeclarations)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.MergeStringExpressions, "Merge string expressions", IsEnabled(RefactoringIdentifiers.MergeStringExpressions)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.NegateBinaryExpression, "Negate binary expression", IsEnabled(RefactoringIdentifiers.NegateBinaryExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.NegateBooleanLiteral, "Negate boolean literal", IsEnabled(RefactoringIdentifiers.NegateBooleanLiteral)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.NegateIsExpression, "Negate is expression", IsEnabled(RefactoringIdentifiers.NegateIsExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.NegateOperator, "Negate operator", IsEnabled(RefactoringIdentifiers.NegateOperator)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.NotifyPropertyChanged, "Notify property changed", IsEnabled(RefactoringIdentifiers.NotifyPropertyChanged)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ParenthesizeExpression, "Parenthesize expression", IsEnabled(RefactoringIdentifiers.ParenthesizeExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.PromoteLocalToParameter, "Promote local to parameter", IsEnabled(RefactoringIdentifiers.PromoteLocalToParameter)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllComments, "Remove all comments", IsEnabled(RefactoringIdentifiers.RemoveAllComments)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllCommentsExceptDocumentationComments, "Remove all comments (except documentation comments)", IsEnabled(RefactoringIdentifiers.RemoveAllCommentsExceptDocumentationComments)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllDocumentationComments, "Remove all documentation comments", IsEnabled(RefactoringIdentifiers.RemoveAllDocumentationComments)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllMemberDeclarations, "Remove all member declarations", IsEnabled(RefactoringIdentifiers.RemoveAllMemberDeclarations)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllPreprocessorDirectives, "Remove all preprocessor directives", IsEnabled(RefactoringIdentifiers.RemoveAllPreprocessorDirectives)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllRegionDirectives, "Remove all region directives", IsEnabled(RefactoringIdentifiers.RemoveAllRegionDirectives)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllStatements, "Remove all statements", IsEnabled(RefactoringIdentifiers.RemoveAllStatements)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveAllSwitchSections, "Remove all switch sections", IsEnabled(RefactoringIdentifiers.RemoveAllSwitchSections)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveBraces, "Remove braces", IsEnabled(RefactoringIdentifiers.RemoveBraces)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveBracesFromIfElse, "Remove braces from if-else", IsEnabled(RefactoringIdentifiers.RemoveBracesFromIfElse)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveBracesFromSwitchSection, "Remove braces from switch section", IsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSection)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveBracesFromSwitchSections, "Remove braces from switch sections", IsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSections)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveComment, "Remove comment", IsEnabled(RefactoringIdentifiers.RemoveComment)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveConditionFromLastElse, "Remove condition from last else clause", IsEnabled(RefactoringIdentifiers.RemoveConditionFromLastElse)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveDirectiveAndRelatedDirectives, "Remove directive and related directives", IsEnabled(RefactoringIdentifiers.RemoveDirectiveAndRelatedDirectives)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveEmptyLines, "Remove empty lines", IsEnabled(RefactoringIdentifiers.RemoveEmptyLines)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveInterpolation, "Remove interpolation", IsEnabled(RefactoringIdentifiers.RemoveInterpolation)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveMember, "Remove member", IsEnabled(RefactoringIdentifiers.RemoveMember)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveMemberDeclarations, "Remove member declarations above/below", IsEnabled(RefactoringIdentifiers.RemoveMemberDeclarations)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveParameterNameFromArgument, "Remove parameter name from argument", IsEnabled(RefactoringIdentifiers.RemoveParameterNameFromArgument)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveParentheses, "Remove parentheses", IsEnabled(RefactoringIdentifiers.RemoveParentheses)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemovePropertyInitializer, "Remove property initializer", IsEnabled(RefactoringIdentifiers.RemovePropertyInitializer)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveRegion, "Remove region", IsEnabled(RefactoringIdentifiers.RemoveRegion)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveStatement, "Remove statement", IsEnabled(RefactoringIdentifiers.RemoveStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RemoveStatementsFromSwitchSections, "Remove statements from switch sections", IsEnabled(RefactoringIdentifiers.RemoveStatementsFromSwitchSections)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RenameBackingFieldAccordingToPropertyName, "Rename backing field according to property name", IsEnabled(RefactoringIdentifiers.RenameBackingFieldAccordingToPropertyName)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RenameIdentifierAccordingToTypeName, "Rename identifier according to type name", IsEnabled(RefactoringIdentifiers.RenameIdentifierAccordingToTypeName)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RenameMethodAccordingToTypeName, "Rename method according to type name", IsEnabled(RefactoringIdentifiers.RenameMethodAccordingToTypeName)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RenameParameterAccordingToTypeName, "Rename parameter according to its type name", IsEnabled(RefactoringIdentifiers.RenameParameterAccordingToTypeName)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.RenamePropertyAccordingToTypeName, "Rename property according to type name", IsEnabled(RefactoringIdentifiers.RenamePropertyAccordingToTypeName)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceAnyWithAllOrAllWithAny, "Replace Any with All (or All with Any)", IsEnabled(RefactoringIdentifiers.ReplaceAnyWithAllOrAllWithAny)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceAsWithCast, "Replace as expression with cast expression", IsEnabled(RefactoringIdentifiers.ReplaceAsWithCast)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceCastWithAs, "Replace cast expression with as expression", IsEnabled(RefactoringIdentifiers.ReplaceCastWithAs)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceConditionalExpressionWithExpression, "Replace conditional expression with expression", IsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceConditionalExpressionWithIfElse, "Replace conditional expression with if-else", IsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithIfElse)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceConstantWithField, "Replace constant with field", IsEnabled(RefactoringIdentifiers.ReplaceConstantWithField)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceCountWithLengthOrLengthWithCount, "Replace Count property with Length property (or Length with Count)", IsEnabled(RefactoringIdentifiers.ReplaceCountWithLengthOrLengthWithCount)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceDoStatementWithWhileStatement, "Replace do statement with while statement", IsEnabled(RefactoringIdentifiers.ReplaceDoStatementWithWhileStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringEquals, "Replace equals expression with String.Equals", IsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringEquals)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrEmpty, "Replace equals expression with String.IsNullOrEmpty", IsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrEmpty)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace, "Replace equals expression with String.IsNullOrWhiteSpace", IsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceExpressionWithConstantValue, "Replace expression with constant value", IsEnabled(RefactoringIdentifiers.ReplaceExpressionWithConstantValue)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceFieldWithConstant, "Replace field with constant", IsEnabled(RefactoringIdentifiers.ReplaceFieldWithConstant)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceForEachWithFor, "Replace foreach statement with for statement", IsEnabled(RefactoringIdentifiers.ReplaceForEachWithFor)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceForWithForEach, "Replace for statement with foreach statement", IsEnabled(RefactoringIdentifiers.ReplaceForWithForEach)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceForWithWhile, "Replace for statement with while statement", IsEnabled(RefactoringIdentifiers.ReplaceForWithWhile)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceHexadecimalLiteralWithDecimalLiteral, "Replace hexadecimal literal with decimal literal", IsEnabled(RefactoringIdentifiers.ReplaceHexadecimalLiteralWithDecimalLiteral)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceIfElseWithSwitch, "Replace if-else with switch statement", IsEnabled(RefactoringIdentifiers.ReplaceIfElseWithSwitch)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceIncrementOperatorWithDecrementOperator, "Replace increment operator with decrement operator", IsEnabled(RefactoringIdentifiers.ReplaceIncrementOperatorWithDecrementOperator)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceInterpolatedStringWithInterpolationExpression, "Replace interpolated string with interpolation expression", IsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithInterpolationExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceInterpolatedStringWithStringLiteral, "Replace interpolated string with string literal", IsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithStringLiteral)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceMethodGroupWithLambda, "Replace method group with lambda", IsEnabled(RefactoringIdentifiers.ReplaceMethodGroupWithLambda)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceMethodWithProperty, "Replace method with property", IsEnabled(RefactoringIdentifiers.ReplaceMethodWithProperty)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceNullLiteralExpressionWithDefaultExpression, "Replace null literal expression with default expression", IsEnabled(RefactoringIdentifiers.ReplaceNullLiteralExpressionWithDefaultExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplacePrefixOperatorWithPostfixOperator, "Replace prefix operator to postfix operator", IsEnabled(RefactoringIdentifiers.ReplacePrefixOperatorWithPostfixOperator)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplacePropertyWithMethod, "Replace property with method", IsEnabled(RefactoringIdentifiers.ReplacePropertyWithMethod)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceRegularStringLiteralWithVerbatimStringLiteral, "Replace regular string literal with verbatim string literal", IsEnabled(RefactoringIdentifiers.ReplaceRegularStringLiteralWithVerbatimStringLiteral)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceStatementWithIfStatement, "Replace statement with if statement", IsEnabled(RefactoringIdentifiers.ReplaceStatementWithIfStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceStringContainsWithStringIndexOf, "Replace String.Contains with String.IndexOf", IsEnabled(RefactoringIdentifiers.ReplaceStringContainsWithStringIndexOf)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceStringFormatWithInterpolatedString, "Replace String.Format with interpolated string", IsEnabled(RefactoringIdentifiers.ReplaceStringFormatWithInterpolatedString)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceStringLiteralWithCharacterLiteral, "Replace string literal with character literal", IsEnabled(RefactoringIdentifiers.ReplaceStringLiteralWithCharacterLiteral)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceSwitchWithIfElse, "Replace switch statement with if-else", IsEnabled(RefactoringIdentifiers.ReplaceSwitchWithIfElse)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiteral, "Replace verbatim string literal with regular string literal", IsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiteral)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiterals, "Replace verbatim string literal with regular string literals", IsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiterals)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceWhileStatementWithDoStatement, "Replace while statement with do statement", IsEnabled(RefactoringIdentifiers.ReplaceWhileStatementWithDoStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReplaceWhileWithFor, "Replace while statement with for statement", IsEnabled(RefactoringIdentifiers.ReplaceWhileWithFor)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ReverseForLoop, "Reverse for loop", IsEnabled(RefactoringIdentifiers.ReverseForLoop)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SimplifyIf, "Simplify if", IsEnabled(RefactoringIdentifiers.SimplifyIf)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SimplifyLambdaExpression, "Simplify lambda expression", IsEnabled(RefactoringIdentifiers.SimplifyLambdaExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SortMemberDeclarations, "Sort member declarations", IsEnabled(RefactoringIdentifiers.SortMemberDeclarations)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SplitAttributes, "Split attributes", IsEnabled(RefactoringIdentifiers.SplitAttributes)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SplitSwitchLabels, "Split switch labels", IsEnabled(RefactoringIdentifiers.SplitSwitchLabels)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SplitVariableDeclaration, "Split variable declaration", IsEnabled(RefactoringIdentifiers.SplitVariableDeclaration)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SwapExpressionsInBinaryExpression, "Swap expressions in binary expression", IsEnabled(RefactoringIdentifiers.SwapExpressionsInBinaryExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SwapExpressionsInConditionalExpression, "Swap expressions in conditional expression", IsEnabled(RefactoringIdentifiers.SwapExpressionsInConditionalExpression)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SwapMemberDeclarations, "Swap member declarations", IsEnabled(RefactoringIdentifiers.SwapMemberDeclarations)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.SwapStatementsInIfElse, "Swap statements in if-else", IsEnabled(RefactoringIdentifiers.SwapStatementsInIfElse)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.Uncomment, "Uncomment", IsEnabled(RefactoringIdentifiers.Uncomment)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag, "Use bitwise operation instead of calling 'HasFlag'", IsEnabled(RefactoringIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseCoalesceExpressionInsteadOfIf, "Use coalesce expression instead of if", IsEnabled(RefactoringIdentifiers.UseCoalesceExpressionInsteadOfIf)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseConditionalExpressionInsteadOfIf, "Use conditional expression instead of if", IsEnabled(RefactoringIdentifiers.UseConditionalExpressionInsteadOfIf)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseElementAccessInsteadOfEnumerableMethod, "Use element access instead of 'First/Last'ElementAt' method", IsEnabled(RefactoringIdentifiers.UseElementAccessInsteadOfEnumerableMethod)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty, "Use \"\" instead of String.Empty", IsEnabled(RefactoringIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseExpressionBodiedMember, "Use expression-bodied member", IsEnabled(RefactoringIdentifiers.UseExpressionBodiedMember)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod, "Use lambda expression instead of anonymous method", IsEnabled(RefactoringIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral, "Use String.Empty instead of \"\"", IsEnabled(RefactoringIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.WrapInCondition, "Wrap in condition", IsEnabled(RefactoringIdentifiers.WrapInCondition)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.WrapInElseClause, "Wrap in else clause", IsEnabled(RefactoringIdentifiers.WrapInElseClause)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.WrapInIfDirective, "Wrap in #if directive", IsEnabled(RefactoringIdentifiers.WrapInIfDirective)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.WrapInRegion, "Wrap in region", IsEnabled(RefactoringIdentifiers.WrapInRegion)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.WrapInTryCatch, "Wrap in try-catch", IsEnabled(RefactoringIdentifiers.WrapInTryCatch)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.WrapInUsingStatement, "Wrap in using statement", IsEnabled(RefactoringIdentifiers.WrapInUsingStatement)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.AddTypeParameter, "Add type parameter", IsEnabled(RefactoringIdentifiers.AddTypeParameter)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.ImplementIEquatableOfT, "Implement IEquatable<T>", IsEnabled(RefactoringIdentifiers.ImplementIEquatableOfT)));
            refactorings.Add(new RefactoringModel(RefactoringIdentifiers.InlineUsingStatic, "Inline using static", IsEnabled(RefactoringIdentifiers.InlineUsingStatic)));
        }

        public void ApplyTo(RefactoringSettings settings)
        {
            settings.SetRefactoring(RefactoringIdentifiers.AddBooleanComparison, IsEnabled(RefactoringIdentifiers.AddBooleanComparison));
            settings.SetRefactoring(RefactoringIdentifiers.AddBraces, IsEnabled(RefactoringIdentifiers.AddBraces));
            settings.SetRefactoring(RefactoringIdentifiers.AddBracesToIfElse, IsEnabled(RefactoringIdentifiers.AddBracesToIfElse));
            settings.SetRefactoring(RefactoringIdentifiers.AddBracesToSwitchSection, IsEnabled(RefactoringIdentifiers.AddBracesToSwitchSection));
            settings.SetRefactoring(RefactoringIdentifiers.AddBracesToSwitchSections, IsEnabled(RefactoringIdentifiers.AddBracesToSwitchSections));
            settings.SetRefactoring(RefactoringIdentifiers.AddCastExpression, IsEnabled(RefactoringIdentifiers.AddCastExpression));
            settings.SetRefactoring(RefactoringIdentifiers.AddDefaultValueToParameter, IsEnabled(RefactoringIdentifiers.AddDefaultValueToParameter));
            settings.SetRefactoring(RefactoringIdentifiers.AddDefaultValueToReturnStatement, IsEnabled(RefactoringIdentifiers.AddDefaultValueToReturnStatement));
            settings.SetRefactoring(RefactoringIdentifiers.AddExceptionToDocumentationComment, IsEnabled(RefactoringIdentifiers.AddExceptionToDocumentationComment));
            settings.SetRefactoring(RefactoringIdentifiers.AddIdentifierToVariableDeclaration, IsEnabled(RefactoringIdentifiers.AddIdentifierToVariableDeclaration));
            settings.SetRefactoring(RefactoringIdentifiers.AddParameterNameToArgument, IsEnabled(RefactoringIdentifiers.AddParameterNameToArgument));
            settings.SetRefactoring(RefactoringIdentifiers.AddParameterNameToParameter, IsEnabled(RefactoringIdentifiers.AddParameterNameToParameter));
            settings.SetRefactoring(RefactoringIdentifiers.AddTypeParameter, IsEnabled(RefactoringIdentifiers.AddTypeParameter));
            settings.SetRefactoring(RefactoringIdentifiers.AddUsingDirective, IsEnabled(RefactoringIdentifiers.AddUsingDirective));
            settings.SetRefactoring(RefactoringIdentifiers.AddUsingStaticDirective, IsEnabled(RefactoringIdentifiers.AddUsingStaticDirective));
            settings.SetRefactoring(RefactoringIdentifiers.CallConfigureAwait, IsEnabled(RefactoringIdentifiers.CallConfigureAwait));
            settings.SetRefactoring(RefactoringIdentifiers.CallExtensionMethodAsInstanceMethod, IsEnabled(RefactoringIdentifiers.CallExtensionMethodAsInstanceMethod));
            settings.SetRefactoring(RefactoringIdentifiers.CallToMethod, IsEnabled(RefactoringIdentifiers.CallToMethod));
            settings.SetRefactoring(RefactoringIdentifiers.ChangeExplicitTypeToVar, IsEnabled(RefactoringIdentifiers.ChangeExplicitTypeToVar));
            settings.SetRefactoring(RefactoringIdentifiers.ChangeMemberTypeAccordingToReturnExpression, IsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToReturnExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ChangeMemberTypeAccordingToYieldReturnExpression, IsEnabled(RefactoringIdentifiers.ChangeMemberTypeAccordingToYieldReturnExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ChangeMethodReturnTypeToVoid, IsEnabled(RefactoringIdentifiers.ChangeMethodReturnTypeToVoid));
            settings.SetRefactoring(RefactoringIdentifiers.ChangeTypeAccordingToExpression, IsEnabled(RefactoringIdentifiers.ChangeTypeAccordingToExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ChangeVarToExplicitType, IsEnabled(RefactoringIdentifiers.ChangeVarToExplicitType));
            settings.SetRefactoring(RefactoringIdentifiers.CheckExpressionForNull, IsEnabled(RefactoringIdentifiers.CheckExpressionForNull));
            settings.SetRefactoring(RefactoringIdentifiers.CheckParameterForNull, IsEnabled(RefactoringIdentifiers.CheckParameterForNull));
            settings.SetRefactoring(RefactoringIdentifiers.CollapseToInitializer, IsEnabled(RefactoringIdentifiers.CollapseToInitializer));
            settings.SetRefactoring(RefactoringIdentifiers.CommentOutMember, IsEnabled(RefactoringIdentifiers.CommentOutMember));
            settings.SetRefactoring(RefactoringIdentifiers.CommentOutStatement, IsEnabled(RefactoringIdentifiers.CommentOutStatement));
            settings.SetRefactoring(RefactoringIdentifiers.CopyDocumentationCommentFromBaseMember, IsEnabled(RefactoringIdentifiers.CopyDocumentationCommentFromBaseMember));
            settings.SetRefactoring(RefactoringIdentifiers.DuplicateArgument, IsEnabled(RefactoringIdentifiers.DuplicateArgument));
            settings.SetRefactoring(RefactoringIdentifiers.DuplicateMember, IsEnabled(RefactoringIdentifiers.DuplicateMember));
            settings.SetRefactoring(RefactoringIdentifiers.DuplicateParameter, IsEnabled(RefactoringIdentifiers.DuplicateParameter));
            settings.SetRefactoring(RefactoringIdentifiers.DuplicateStatement, IsEnabled(RefactoringIdentifiers.DuplicateStatement));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandAssignmentExpression, IsEnabled(RefactoringIdentifiers.ExpandAssignmentExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandCoalesceExpression, IsEnabled(RefactoringIdentifiers.ExpandCoalesceExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandEvent, IsEnabled(RefactoringIdentifiers.ExpandEvent));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandExpressionBody, IsEnabled(RefactoringIdentifiers.ExpandExpressionBody));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandInitializer, IsEnabled(RefactoringIdentifiers.ExpandInitializer));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandLambdaExpressionBody, IsEnabled(RefactoringIdentifiers.ExpandLambdaExpressionBody));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandProperty, IsEnabled(RefactoringIdentifiers.ExpandProperty));
            settings.SetRefactoring(RefactoringIdentifiers.ExpandPropertyAndAddBackingField, IsEnabled(RefactoringIdentifiers.ExpandPropertyAndAddBackingField));
            settings.SetRefactoring(RefactoringIdentifiers.ExtractDeclarationFromUsingStatement, IsEnabled(RefactoringIdentifiers.ExtractDeclarationFromUsingStatement));
            settings.SetRefactoring(RefactoringIdentifiers.ExtractExpressionFromCondition, IsEnabled(RefactoringIdentifiers.ExtractExpressionFromCondition));
            settings.SetRefactoring(RefactoringIdentifiers.ExtractGenericType, IsEnabled(RefactoringIdentifiers.ExtractGenericType));
            settings.SetRefactoring(RefactoringIdentifiers.ExtractStatement, IsEnabled(RefactoringIdentifiers.ExtractStatement));
            settings.SetRefactoring(RefactoringIdentifiers.ExtractTypeDeclarationToNewFile, IsEnabled(RefactoringIdentifiers.ExtractTypeDeclarationToNewFile));
            settings.SetRefactoring(RefactoringIdentifiers.FormatAccessorBraces, IsEnabled(RefactoringIdentifiers.FormatAccessorBraces));
            settings.SetRefactoring(RefactoringIdentifiers.FormatArgumentList, IsEnabled(RefactoringIdentifiers.FormatArgumentList));
            settings.SetRefactoring(RefactoringIdentifiers.FormatBinaryExpression, IsEnabled(RefactoringIdentifiers.FormatBinaryExpression));
            settings.SetRefactoring(RefactoringIdentifiers.FormatConditionalExpression, IsEnabled(RefactoringIdentifiers.FormatConditionalExpression));
            settings.SetRefactoring(RefactoringIdentifiers.FormatExpressionChain, IsEnabled(RefactoringIdentifiers.FormatExpressionChain));
            settings.SetRefactoring(RefactoringIdentifiers.FormatInitializer, IsEnabled(RefactoringIdentifiers.FormatInitializer));
            settings.SetRefactoring(RefactoringIdentifiers.FormatParameterList, IsEnabled(RefactoringIdentifiers.FormatParameterList));
            settings.SetRefactoring(RefactoringIdentifiers.GenerateBaseConstructors, IsEnabled(RefactoringIdentifiers.GenerateBaseConstructors));
            settings.SetRefactoring(RefactoringIdentifiers.GenerateCombinedEnumMember, IsEnabled(RefactoringIdentifiers.GenerateCombinedEnumMember));
            settings.SetRefactoring(RefactoringIdentifiers.GenerateEnumMember, IsEnabled(RefactoringIdentifiers.GenerateEnumMember));
            settings.SetRefactoring(RefactoringIdentifiers.GenerateEnumValues, IsEnabled(RefactoringIdentifiers.GenerateEnumValues));
            settings.SetRefactoring(RefactoringIdentifiers.GenerateEventInvokingMethod, IsEnabled(RefactoringIdentifiers.GenerateEventInvokingMethod));
            settings.SetRefactoring(RefactoringIdentifiers.GenerateSwitchSections, IsEnabled(RefactoringIdentifiers.GenerateSwitchSections));
            settings.SetRefactoring(RefactoringIdentifiers.ImplementIEquatableOfT, IsEnabled(RefactoringIdentifiers.ImplementIEquatableOfT));
            settings.SetRefactoring(RefactoringIdentifiers.InitializeLocalWithDefaultValue, IsEnabled(RefactoringIdentifiers.InitializeLocalWithDefaultValue));
            settings.SetRefactoring(RefactoringIdentifiers.InlineAliasExpression, IsEnabled(RefactoringIdentifiers.InlineAliasExpression));
            settings.SetRefactoring(RefactoringIdentifiers.InlineMethod, IsEnabled(RefactoringIdentifiers.InlineMethod));
            settings.SetRefactoring(RefactoringIdentifiers.InlineUsingStatic, IsEnabled(RefactoringIdentifiers.InlineUsingStatic));
            settings.SetRefactoring(RefactoringIdentifiers.InsertStringInterpolation, IsEnabled(RefactoringIdentifiers.InsertStringInterpolation));
            settings.SetRefactoring(RefactoringIdentifiers.IntroduceAndInitializeField, IsEnabled(RefactoringIdentifiers.IntroduceAndInitializeField));
            settings.SetRefactoring(RefactoringIdentifiers.IntroduceAndInitializeProperty, IsEnabled(RefactoringIdentifiers.IntroduceAndInitializeProperty));
            settings.SetRefactoring(RefactoringIdentifiers.IntroduceConstructor, IsEnabled(RefactoringIdentifiers.IntroduceConstructor));
            settings.SetRefactoring(RefactoringIdentifiers.IntroduceFieldToLockOn, IsEnabled(RefactoringIdentifiers.IntroduceFieldToLockOn));
            settings.SetRefactoring(RefactoringIdentifiers.IntroduceLocalFromStatementThatReturnsValue, IsEnabled(RefactoringIdentifiers.IntroduceLocalFromStatementThatReturnsValue));
            settings.SetRefactoring(RefactoringIdentifiers.MakeMemberAbstract, IsEnabled(RefactoringIdentifiers.MakeMemberAbstract));
            settings.SetRefactoring(RefactoringIdentifiers.MakeMemberVirtual, IsEnabled(RefactoringIdentifiers.MakeMemberVirtual));
            settings.SetRefactoring(RefactoringIdentifiers.MarkContainingClassAsAbstract, IsEnabled(RefactoringIdentifiers.MarkContainingClassAsAbstract));
            settings.SetRefactoring(RefactoringIdentifiers.MarkMemberAsStatic, IsEnabled(RefactoringIdentifiers.MarkMemberAsStatic));
            settings.SetRefactoring(RefactoringIdentifiers.MergeAssignmentExpressionWithReturnStatement, IsEnabled(RefactoringIdentifiers.MergeAssignmentExpressionWithReturnStatement));
            settings.SetRefactoring(RefactoringIdentifiers.MergeAttributes, IsEnabled(RefactoringIdentifiers.MergeAttributes));
            settings.SetRefactoring(RefactoringIdentifiers.MergeIfStatements, IsEnabled(RefactoringIdentifiers.MergeIfStatements));
            settings.SetRefactoring(RefactoringIdentifiers.MergeInterpolationIntoInterpolatedString, IsEnabled(RefactoringIdentifiers.MergeInterpolationIntoInterpolatedString));
            settings.SetRefactoring(RefactoringIdentifiers.MergeLocalDeclarations, IsEnabled(RefactoringIdentifiers.MergeLocalDeclarations));
            settings.SetRefactoring(RefactoringIdentifiers.MergeStringExpressions, IsEnabled(RefactoringIdentifiers.MergeStringExpressions));
            settings.SetRefactoring(RefactoringIdentifiers.NegateBinaryExpression, IsEnabled(RefactoringIdentifiers.NegateBinaryExpression));
            settings.SetRefactoring(RefactoringIdentifiers.NegateBooleanLiteral, IsEnabled(RefactoringIdentifiers.NegateBooleanLiteral));
            settings.SetRefactoring(RefactoringIdentifiers.NegateIsExpression, IsEnabled(RefactoringIdentifiers.NegateIsExpression));
            settings.SetRefactoring(RefactoringIdentifiers.NegateOperator, IsEnabled(RefactoringIdentifiers.NegateOperator));
            settings.SetRefactoring(RefactoringIdentifiers.NotifyPropertyChanged, IsEnabled(RefactoringIdentifiers.NotifyPropertyChanged));
            settings.SetRefactoring(RefactoringIdentifiers.ParenthesizeExpression, IsEnabled(RefactoringIdentifiers.ParenthesizeExpression));
            settings.SetRefactoring(RefactoringIdentifiers.PromoteLocalToParameter, IsEnabled(RefactoringIdentifiers.PromoteLocalToParameter));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllComments, IsEnabled(RefactoringIdentifiers.RemoveAllComments));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllCommentsExceptDocumentationComments, IsEnabled(RefactoringIdentifiers.RemoveAllCommentsExceptDocumentationComments));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllDocumentationComments, IsEnabled(RefactoringIdentifiers.RemoveAllDocumentationComments));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllMemberDeclarations, IsEnabled(RefactoringIdentifiers.RemoveAllMemberDeclarations));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllPreprocessorDirectives, IsEnabled(RefactoringIdentifiers.RemoveAllPreprocessorDirectives));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllRegionDirectives, IsEnabled(RefactoringIdentifiers.RemoveAllRegionDirectives));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllStatements, IsEnabled(RefactoringIdentifiers.RemoveAllStatements));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveAllSwitchSections, IsEnabled(RefactoringIdentifiers.RemoveAllSwitchSections));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveBraces, IsEnabled(RefactoringIdentifiers.RemoveBraces));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveBracesFromIfElse, IsEnabled(RefactoringIdentifiers.RemoveBracesFromIfElse));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveBracesFromSwitchSection, IsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSection));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveBracesFromSwitchSections, IsEnabled(RefactoringIdentifiers.RemoveBracesFromSwitchSections));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveComment, IsEnabled(RefactoringIdentifiers.RemoveComment));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveConditionFromLastElse, IsEnabled(RefactoringIdentifiers.RemoveConditionFromLastElse));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveDirectiveAndRelatedDirectives, IsEnabled(RefactoringIdentifiers.RemoveDirectiveAndRelatedDirectives));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveEmptyLines, IsEnabled(RefactoringIdentifiers.RemoveEmptyLines));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveInterpolation, IsEnabled(RefactoringIdentifiers.RemoveInterpolation));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveMember, IsEnabled(RefactoringIdentifiers.RemoveMember));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveMemberDeclarations, IsEnabled(RefactoringIdentifiers.RemoveMemberDeclarations));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveParameterNameFromArgument, IsEnabled(RefactoringIdentifiers.RemoveParameterNameFromArgument));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveParentheses, IsEnabled(RefactoringIdentifiers.RemoveParentheses));
            settings.SetRefactoring(RefactoringIdentifiers.RemovePropertyInitializer, IsEnabled(RefactoringIdentifiers.RemovePropertyInitializer));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveRegion, IsEnabled(RefactoringIdentifiers.RemoveRegion));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveStatement, IsEnabled(RefactoringIdentifiers.RemoveStatement));
            settings.SetRefactoring(RefactoringIdentifiers.RemoveStatementsFromSwitchSections, IsEnabled(RefactoringIdentifiers.RemoveStatementsFromSwitchSections));
            settings.SetRefactoring(RefactoringIdentifiers.RenameBackingFieldAccordingToPropertyName, IsEnabled(RefactoringIdentifiers.RenameBackingFieldAccordingToPropertyName));
            settings.SetRefactoring(RefactoringIdentifiers.RenameIdentifierAccordingToTypeName, IsEnabled(RefactoringIdentifiers.RenameIdentifierAccordingToTypeName));
            settings.SetRefactoring(RefactoringIdentifiers.RenameMethodAccordingToTypeName, IsEnabled(RefactoringIdentifiers.RenameMethodAccordingToTypeName));
            settings.SetRefactoring(RefactoringIdentifiers.RenameParameterAccordingToTypeName, IsEnabled(RefactoringIdentifiers.RenameParameterAccordingToTypeName));
            settings.SetRefactoring(RefactoringIdentifiers.RenamePropertyAccordingToTypeName, IsEnabled(RefactoringIdentifiers.RenamePropertyAccordingToTypeName));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceAnyWithAllOrAllWithAny, IsEnabled(RefactoringIdentifiers.ReplaceAnyWithAllOrAllWithAny));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceAsWithCast, IsEnabled(RefactoringIdentifiers.ReplaceAsWithCast));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceCastWithAs, IsEnabled(RefactoringIdentifiers.ReplaceCastWithAs));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceConditionalExpressionWithExpression, IsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceConditionalExpressionWithIfElse, IsEnabled(RefactoringIdentifiers.ReplaceConditionalExpressionWithIfElse));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceConstantWithField, IsEnabled(RefactoringIdentifiers.ReplaceConstantWithField));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceCountWithLengthOrLengthWithCount, IsEnabled(RefactoringIdentifiers.ReplaceCountWithLengthOrLengthWithCount));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceDoStatementWithWhileStatement, IsEnabled(RefactoringIdentifiers.ReplaceDoStatementWithWhileStatement));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringEquals, IsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringEquals));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrEmpty, IsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrEmpty));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace, IsEnabled(RefactoringIdentifiers.ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceExpressionWithConstantValue, IsEnabled(RefactoringIdentifiers.ReplaceExpressionWithConstantValue));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceFieldWithConstant, IsEnabled(RefactoringIdentifiers.ReplaceFieldWithConstant));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceForEachWithFor, IsEnabled(RefactoringIdentifiers.ReplaceForEachWithFor));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceForWithForEach, IsEnabled(RefactoringIdentifiers.ReplaceForWithForEach));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceForWithWhile, IsEnabled(RefactoringIdentifiers.ReplaceForWithWhile));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceHexadecimalLiteralWithDecimalLiteral, IsEnabled(RefactoringIdentifiers.ReplaceHexadecimalLiteralWithDecimalLiteral));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceIfElseWithSwitch, IsEnabled(RefactoringIdentifiers.ReplaceIfElseWithSwitch));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceIncrementOperatorWithDecrementOperator, IsEnabled(RefactoringIdentifiers.ReplaceIncrementOperatorWithDecrementOperator));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceInterpolatedStringWithInterpolationExpression, IsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithInterpolationExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceInterpolatedStringWithStringLiteral, IsEnabled(RefactoringIdentifiers.ReplaceInterpolatedStringWithStringLiteral));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceMethodGroupWithLambda, IsEnabled(RefactoringIdentifiers.ReplaceMethodGroupWithLambda));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceMethodWithProperty, IsEnabled(RefactoringIdentifiers.ReplaceMethodWithProperty));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceNullLiteralExpressionWithDefaultExpression, IsEnabled(RefactoringIdentifiers.ReplaceNullLiteralExpressionWithDefaultExpression));
            settings.SetRefactoring(RefactoringIdentifiers.ReplacePrefixOperatorWithPostfixOperator, IsEnabled(RefactoringIdentifiers.ReplacePrefixOperatorWithPostfixOperator));
            settings.SetRefactoring(RefactoringIdentifiers.ReplacePropertyWithMethod, IsEnabled(RefactoringIdentifiers.ReplacePropertyWithMethod));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceRegularStringLiteralWithVerbatimStringLiteral, IsEnabled(RefactoringIdentifiers.ReplaceRegularStringLiteralWithVerbatimStringLiteral));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceStatementWithIfStatement, IsEnabled(RefactoringIdentifiers.ReplaceStatementWithIfStatement));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceStringContainsWithStringIndexOf, IsEnabled(RefactoringIdentifiers.ReplaceStringContainsWithStringIndexOf));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceStringFormatWithInterpolatedString, IsEnabled(RefactoringIdentifiers.ReplaceStringFormatWithInterpolatedString));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceStringLiteralWithCharacterLiteral, IsEnabled(RefactoringIdentifiers.ReplaceStringLiteralWithCharacterLiteral));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceSwitchWithIfElse, IsEnabled(RefactoringIdentifiers.ReplaceSwitchWithIfElse));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiteral, IsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiteral));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiterals, IsEnabled(RefactoringIdentifiers.ReplaceVerbatimStringLiteralWithRegularStringLiterals));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceWhileStatementWithDoStatement, IsEnabled(RefactoringIdentifiers.ReplaceWhileStatementWithDoStatement));
            settings.SetRefactoring(RefactoringIdentifiers.ReplaceWhileWithFor, IsEnabled(RefactoringIdentifiers.ReplaceWhileWithFor));
            settings.SetRefactoring(RefactoringIdentifiers.ReverseForLoop, IsEnabled(RefactoringIdentifiers.ReverseForLoop));
            settings.SetRefactoring(RefactoringIdentifiers.SimplifyIf, IsEnabled(RefactoringIdentifiers.SimplifyIf));
            settings.SetRefactoring(RefactoringIdentifiers.SimplifyLambdaExpression, IsEnabled(RefactoringIdentifiers.SimplifyLambdaExpression));
            settings.SetRefactoring(RefactoringIdentifiers.SortMemberDeclarations, IsEnabled(RefactoringIdentifiers.SortMemberDeclarations));
            settings.SetRefactoring(RefactoringIdentifiers.SplitAttributes, IsEnabled(RefactoringIdentifiers.SplitAttributes));
            settings.SetRefactoring(RefactoringIdentifiers.SplitSwitchLabels, IsEnabled(RefactoringIdentifiers.SplitSwitchLabels));
            settings.SetRefactoring(RefactoringIdentifiers.SplitVariableDeclaration, IsEnabled(RefactoringIdentifiers.SplitVariableDeclaration));
            settings.SetRefactoring(RefactoringIdentifiers.SwapExpressionsInBinaryExpression, IsEnabled(RefactoringIdentifiers.SwapExpressionsInBinaryExpression));
            settings.SetRefactoring(RefactoringIdentifiers.SwapExpressionsInConditionalExpression, IsEnabled(RefactoringIdentifiers.SwapExpressionsInConditionalExpression));
            settings.SetRefactoring(RefactoringIdentifiers.SwapMemberDeclarations, IsEnabled(RefactoringIdentifiers.SwapMemberDeclarations));
            settings.SetRefactoring(RefactoringIdentifiers.SwapStatementsInIfElse, IsEnabled(RefactoringIdentifiers.SwapStatementsInIfElse));
            settings.SetRefactoring(RefactoringIdentifiers.Uncomment, IsEnabled(RefactoringIdentifiers.Uncomment));
            settings.SetRefactoring(RefactoringIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag, IsEnabled(RefactoringIdentifiers.UseBitwiseOperationInsteadOfCallingHasFlag));
            settings.SetRefactoring(RefactoringIdentifiers.UseCoalesceExpressionInsteadOfIf, IsEnabled(RefactoringIdentifiers.UseCoalesceExpressionInsteadOfIf));
            settings.SetRefactoring(RefactoringIdentifiers.UseConditionalExpressionInsteadOfIf, IsEnabled(RefactoringIdentifiers.UseConditionalExpressionInsteadOfIf));
            settings.SetRefactoring(RefactoringIdentifiers.UseElementAccessInsteadOfEnumerableMethod, IsEnabled(RefactoringIdentifiers.UseElementAccessInsteadOfEnumerableMethod));
            settings.SetRefactoring(RefactoringIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty, IsEnabled(RefactoringIdentifiers.UseEmptyStringLiteralInsteadOfStringEmpty));
            settings.SetRefactoring(RefactoringIdentifiers.UseExpressionBodiedMember, IsEnabled(RefactoringIdentifiers.UseExpressionBodiedMember));
            settings.SetRefactoring(RefactoringIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod, IsEnabled(RefactoringIdentifiers.UseLambdaExpressionInsteadOfAnonymousMethod));
            settings.SetRefactoring(RefactoringIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral, IsEnabled(RefactoringIdentifiers.UseStringEmptyInsteadOfEmptyStringLiteral));
            settings.SetRefactoring(RefactoringIdentifiers.WrapInCondition, IsEnabled(RefactoringIdentifiers.WrapInCondition));
            settings.SetRefactoring(RefactoringIdentifiers.WrapInElseClause, IsEnabled(RefactoringIdentifiers.WrapInElseClause));
            settings.SetRefactoring(RefactoringIdentifiers.WrapInIfDirective, IsEnabled(RefactoringIdentifiers.WrapInIfDirective));
            settings.SetRefactoring(RefactoringIdentifiers.WrapInRegion, IsEnabled(RefactoringIdentifiers.WrapInRegion));
            settings.SetRefactoring(RefactoringIdentifiers.WrapInTryCatch, IsEnabled(RefactoringIdentifiers.WrapInTryCatch));
            settings.SetRefactoring(RefactoringIdentifiers.WrapInUsingStatement, IsEnabled(RefactoringIdentifiers.WrapInUsingStatement));
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBooleanComparison
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBraces
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBracesToIfElse
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBracesToSwitchSection
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddBracesToSwitchSections
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddCastExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddDefaultValueToParameter
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddDefaultValueToReturnStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddExceptionToDocumentationComment
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddIdentifierToVariableDeclaration
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddParameterNameToArgument
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddParameterNameToParameter
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddUsingDirective
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool AddUsingStaticDirective
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CallConfigureAwait
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CallExtensionMethodAsInstanceMethod
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CallToMethod
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeExplicitTypeToVar
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeMemberTypeAccordingToReturnExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeMemberTypeAccordingToYieldReturnExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeMethodReturnTypeToVoid
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeTypeAccordingToExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ChangeVarToExplicitType
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CheckExpressionForNull
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CheckParameterForNull
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CollapseToInitializer
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CommentOutMember
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CommentOutStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool CopyDocumentationCommentFromBaseMember
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateArgument
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateMember
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateParameter
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool DuplicateStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandAssignmentExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandCoalesceExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandEvent
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandExpressionBody
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandInitializer
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandLambdaExpressionBody
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandProperty
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExpandPropertyAndAddBackingField
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractDeclarationFromUsingStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractExpressionFromCondition
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractGenericType
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ExtractTypeDeclarationToNewFile
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatAccessorBraces
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatArgumentList
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatBinaryExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatConditionalExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatExpressionChain
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatInitializer
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool FormatParameterList
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateBaseConstructors
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateCombinedEnumMember
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateEnumMember
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateEnumValues
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateEventInvokingMethod
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool GenerateSwitchSections
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool InitializeLocalWithDefaultValue
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool InlineAliasExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool InlineMethod
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool InsertStringInterpolation
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceAndInitializeField
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceAndInitializeProperty
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceConstructor
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceFieldToLockOn
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool IntroduceLocalFromStatementThatReturnsValue
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MakeMemberAbstract
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MakeMemberVirtual
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MarkContainingClassAsAbstract
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MarkMemberAsStatic
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeAssignmentExpressionWithReturnStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeAttributes
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeIfStatements
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeInterpolationIntoInterpolatedString
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeLocalDeclarations
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool MergeStringExpressions
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NegateBinaryExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NegateBooleanLiteral
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NegateIsExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NegateOperator
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool NotifyPropertyChanged
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ParenthesizeExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool PromoteLocalToParameter
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllComments
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllCommentsExceptDocumentationComments
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllDocumentationComments
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllMemberDeclarations
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllPreprocessorDirectives
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllRegionDirectives
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllStatements
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveAllSwitchSections
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBraces
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBracesFromIfElse
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBracesFromSwitchSection
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveBracesFromSwitchSections
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveComment
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveConditionFromLastElse
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveDirectiveAndRelatedDirectives
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveEmptyLines
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveInterpolation
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveMember
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveMemberDeclarations
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveParameterNameFromArgument
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveParentheses
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemovePropertyInitializer
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveRegion
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RemoveStatementsFromSwitchSections
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameBackingFieldAccordingToPropertyName
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameIdentifierAccordingToTypeName
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameMethodAccordingToTypeName
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenameParameterAccordingToTypeName
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool RenamePropertyAccordingToTypeName
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceAnyWithAllOrAllWithAny
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceAsWithCast
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceCastWithAs
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceConditionalExpressionWithExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceConditionalExpressionWithIfElse
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceConstantWithField
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceCountWithLengthOrLengthWithCount
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceDoStatementWithWhileStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceEqualsExpressionWithStringEquals
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceEqualsExpressionWithStringIsNullOrEmpty
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceExpressionWithConstantValue
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceFieldWithConstant
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceForEachWithFor
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceForWithForEach
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceForWithWhile
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceHexadecimalLiteralWithDecimalLiteral
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceIfElseWithSwitch
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceIncrementOperatorWithDecrementOperator
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceInterpolatedStringWithInterpolationExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceInterpolatedStringWithStringLiteral
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceMethodGroupWithLambda
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceMethodWithProperty
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceNullLiteralExpressionWithDefaultExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplacePrefixOperatorWithPostfixOperator
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplacePropertyWithMethod
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceRegularStringLiteralWithVerbatimStringLiteral
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceStatementWithIfStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceStringContainsWithStringIndexOf
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceStringFormatWithInterpolatedString
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceStringLiteralWithCharacterLiteral
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceSwitchWithIfElse
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceVerbatimStringLiteralWithRegularStringLiteral
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceVerbatimStringLiteralWithRegularStringLiterals
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceWhileStatementWithDoStatement
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReplaceWhileWithFor
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool ReverseForLoop
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SimplifyIf
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SimplifyLambdaExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SortMemberDeclarations
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SplitAttributes
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SplitSwitchLabels
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SplitVariableDeclaration
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapExpressionsInBinaryExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapExpressionsInConditionalExpression
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapMemberDeclarations
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool SwapStatementsInIfElse
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool Uncomment
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseBitwiseOperationInsteadOfCallingHasFlag
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseCoalesceExpressionInsteadOfIf
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseConditionalExpressionInsteadOfIf
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseElementAccessInsteadOfEnumerableMethod
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseEmptyStringLiteralInsteadOfStringEmpty
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseExpressionBodiedMember
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseLambdaExpressionInsteadOfAnonymousMethod
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool UseStringEmptyInsteadOfEmptyStringLiteral
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInCondition
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInElseClause
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInIfDirective
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInRegion
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInTryCatch
        {
            get;
            set;
        }

        [Browsable(false)]
        [Category(RefactoringCategory)]
        [TypeConverter(typeof (EnabledDisabledConverter))]
        public bool WrapInUsingStatement
        {
            get;
            set;
        }
    }
}