// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System.Collections.Generic;

namespace Roslynator.CSharp.Refactorings
{
    public static class RefactoringIdentifiers
    {
        public const string AddBooleanComparison = "AddBooleanComparison";
        public const string AddBraces = "AddBraces";
        public const string AddBracesToIfElse = "AddBracesToIfElse";
        public const string AddBracesToSwitchSection = "AddBracesToSwitchSection";
        public const string AddBracesToSwitchSections = "AddBracesToSwitchSections";
        public const string AddCastExpression = "AddCastExpression";
        public const string AddDefaultValueToParameter = "AddDefaultValueToParameter";
        public const string AddDefaultValueToReturnStatement = "AddDefaultValueToReturnStatement";
        public const string AddExceptionToDocumentationComment = "AddExceptionToDocumentationComment";
        public const string AddIdentifierToVariableDeclaration = "AddIdentifierToVariableDeclaration";
        public const string AddParameterNameToArgument = "AddParameterNameToArgument";
        public const string AddParameterNameToParameter = "AddParameterNameToParameter";
        public const string AddUsingDirective = "AddUsingDirective";
        public const string AddUsingStaticDirective = "AddUsingStaticDirective";
        public const string CallConfigureAwait = "CallConfigureAwait";
        public const string CallExtensionMethodAsInstanceMethod = "CallExtensionMethodAsInstanceMethod";
        public const string CallToMethod = "CallToMethod";
        public const string ChangeExplicitTypeToVar = "ChangeExplicitTypeToVar";
        public const string ChangeMemberTypeAccordingToReturnExpression = "ChangeMemberTypeAccordingToReturnExpression";
        public const string ChangeMemberTypeAccordingToYieldReturnExpression = "ChangeMemberTypeAccordingToYieldReturnExpression";
        public const string ChangeMethodReturnTypeToVoid = "ChangeMethodReturnTypeToVoid";
        public const string ChangeTypeAccordingToExpression = "ChangeTypeAccordingToExpression";
        public const string ChangeVarToExplicitType = "ChangeVarToExplicitType";
        public const string CheckExpressionForNull = "CheckExpressionForNull";
        public const string CheckParameterForNull = "CheckParameterForNull";
        public const string CollapseToInitializer = "CollapseToInitializer";
        public const string CommentOutMember = "CommentOutMember";
        public const string CommentOutStatement = "CommentOutStatement";
        public const string CopyDocumentationCommentFromBaseMember = "CopyDocumentationCommentFromBaseMember";
        public const string DuplicateArgument = "DuplicateArgument";
        public const string DuplicateMember = "DuplicateMember";
        public const string DuplicateParameter = "DuplicateParameter";
        public const string DuplicateStatement = "DuplicateStatement";
        public const string ExpandAssignmentExpression = "ExpandAssignmentExpression";
        public const string ExpandCoalesceExpression = "ExpandCoalesceExpression";
        public const string ExpandEvent = "ExpandEvent";
        public const string ExpandExpressionBody = "ExpandExpressionBody";
        public const string ExpandInitializer = "ExpandInitializer";
        public const string ExpandLambdaExpressionBody = "ExpandLambdaExpressionBody";
        public const string ExpandProperty = "ExpandProperty";
        public const string ExpandPropertyAndAddBackingField = "ExpandPropertyAndAddBackingField";
        public const string ExtractDeclarationFromUsingStatement = "ExtractDeclarationFromUsingStatement";
        public const string ExtractExpressionFromCondition = "ExtractExpressionFromCondition";
        public const string ExtractGenericType = "ExtractGenericType";
        public const string ExtractStatement = "ExtractStatement";
        public const string ExtractTypeDeclarationToNewFile = "ExtractTypeDeclarationToNewFile";
        public const string FormatAccessorBraces = "FormatAccessorBraces";
        public const string FormatArgumentList = "FormatArgumentList";
        public const string FormatBinaryExpression = "FormatBinaryExpression";
        public const string FormatConditionalExpression = "FormatConditionalExpression";
        public const string FormatExpressionChain = "FormatExpressionChain";
        public const string FormatInitializer = "FormatInitializer";
        public const string FormatParameterList = "FormatParameterList";
        public const string GenerateBaseConstructors = "GenerateBaseConstructors";
        public const string GenerateCombinedEnumMember = "GenerateCombinedEnumMember";
        public const string GenerateEnumMember = "GenerateEnumMember";
        public const string GenerateEnumValues = "GenerateEnumValues";
        public const string GenerateEventInvokingMethod = "GenerateEventInvokingMethod";
        public const string GenerateSwitchSections = "GenerateSwitchSections";
        public const string InitializeLocalWithDefaultValue = "InitializeLocalWithDefaultValue";
        public const string InlineAliasExpression = "InlineAliasExpression";
        public const string InlineMethod = "InlineMethod";
        public const string InsertStringInterpolation = "InsertStringInterpolation";
        public const string IntroduceAndInitializeField = "IntroduceAndInitializeField";
        public const string IntroduceAndInitializeProperty = "IntroduceAndInitializeProperty";
        public const string IntroduceConstructor = "IntroduceConstructor";
        public const string IntroduceFieldToLockOn = "IntroduceFieldToLockOn";
        public const string IntroduceLocalFromStatementThatReturnsValue = "IntroduceLocalFromStatementThatReturnsValue";
        public const string MakeMemberAbstract = "MakeMemberAbstract";
        public const string MakeMemberVirtual = "MakeMemberVirtual";
        public const string MarkContainingClassAsAbstract = "MarkContainingClassAsAbstract";
        public const string MarkMemberAsStatic = "MarkMemberAsStatic";
        public const string MergeAssignmentExpressionWithReturnStatement = "MergeAssignmentExpressionWithReturnStatement";
        public const string MergeAttributes = "MergeAttributes";
        public const string MergeIfStatements = "MergeIfStatements";
        public const string MergeInterpolationIntoInterpolatedString = "MergeInterpolationIntoInterpolatedString";
        public const string MergeLocalDeclarations = "MergeLocalDeclarations";
        public const string MergeStringExpressions = "MergeStringExpressions";
        public const string NegateBinaryExpression = "NegateBinaryExpression";
        public const string NegateBooleanLiteral = "NegateBooleanLiteral";
        public const string NegateIsExpression = "NegateIsExpression";
        public const string NegateOperator = "NegateOperator";
        public const string NotifyPropertyChanged = "NotifyPropertyChanged";
        public const string ParenthesizeExpression = "ParenthesizeExpression";
        public const string PromoteLocalToParameter = "PromoteLocalToParameter";
        public const string RemoveAllComments = "RemoveAllComments";
        public const string RemoveAllCommentsExceptDocumentationComments = "RemoveAllCommentsExceptDocumentationComments";
        public const string RemoveAllDocumentationComments = "RemoveAllDocumentationComments";
        public const string RemoveAllMemberDeclarations = "RemoveAllMemberDeclarations";
        public const string RemoveAllPreprocessorDirectives = "RemoveAllPreprocessorDirectives";
        public const string RemoveAllRegionDirectives = "RemoveAllRegionDirectives";
        public const string RemoveAllStatements = "RemoveAllStatements";
        public const string RemoveAllSwitchSections = "RemoveAllSwitchSections";
        public const string RemoveBraces = "RemoveBraces";
        public const string RemoveBracesFromIfElse = "RemoveBracesFromIfElse";
        public const string RemoveBracesFromSwitchSection = "RemoveBracesFromSwitchSection";
        public const string RemoveBracesFromSwitchSections = "RemoveBracesFromSwitchSections";
        public const string RemoveComment = "RemoveComment";
        public const string RemoveConditionFromLastElse = "RemoveConditionFromLastElse";
        public const string RemoveDirectiveAndRelatedDirectives = "RemoveDirectiveAndRelatedDirectives";
        public const string RemoveEmptyLines = "RemoveEmptyLines";
        public const string RemoveInterpolation = "RemoveInterpolation";
        public const string RemoveMember = "RemoveMember";
        public const string RemoveMemberDeclarations = "RemoveMemberDeclarations";
        public const string RemoveParameterNameFromArgument = "RemoveParameterNameFromArgument";
        public const string RemoveParentheses = "RemoveParentheses";
        public const string RemovePropertyInitializer = "RemovePropertyInitializer";
        public const string RemoveRegion = "RemoveRegion";
        public const string RemoveStatement = "RemoveStatement";
        public const string RemoveStatementsFromSwitchSections = "RemoveStatementsFromSwitchSections";
        public const string RenameBackingFieldAccordingToPropertyName = "RenameBackingFieldAccordingToPropertyName";
        public const string RenameIdentifierAccordingToTypeName = "RenameIdentifierAccordingToTypeName";
        public const string RenameMethodAccordingToTypeName = "RenameMethodAccordingToTypeName";
        public const string RenameParameterAccordingToTypeName = "RenameParameterAccordingToTypeName";
        public const string RenamePropertyAccordingToTypeName = "RenamePropertyAccordingToTypeName";
        public const string ReplaceAnyWithAllOrAllWithAny = "ReplaceAnyWithAllOrAllWithAny";
        public const string ReplaceAsWithCast = "ReplaceAsWithCast";
        public const string ReplaceCastWithAs = "ReplaceCastWithAs";
        public const string ReplaceConditionalExpressionWithExpression = "ReplaceConditionalExpressionWithExpression";
        public const string ReplaceConditionalExpressionWithIfElse = "ReplaceConditionalExpressionWithIfElse";
        public const string ReplaceConstantWithField = "ReplaceConstantWithField";
        public const string ReplaceCountWithLengthOrLengthWithCount = "ReplaceCountWithLengthOrLengthWithCount";
        public const string ReplaceDoStatementWithWhileStatement = "ReplaceDoStatementWithWhileStatement";
        public const string ReplaceEqualsExpressionWithStringEquals = "ReplaceEqualsExpressionWithStringEquals";
        public const string ReplaceEqualsExpressionWithStringIsNullOrEmpty = "ReplaceEqualsExpressionWithStringIsNullOrEmpty";
        public const string ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace = "ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace";
        public const string ReplaceExpressionWithConstantValue = "ReplaceExpressionWithConstantValue";
        public const string ReplaceFieldWithConstant = "ReplaceFieldWithConstant";
        public const string ReplaceForEachWithFor = "ReplaceForEachWithFor";
        public const string ReplaceForWithForEach = "ReplaceForWithForEach";
        public const string ReplaceForWithWhile = "ReplaceForWithWhile";
        public const string ReplaceHexadecimalLiteralWithDecimalLiteral = "ReplaceHexadecimalLiteralWithDecimalLiteral";
        public const string ReplaceIfElseWithSwitch = "ReplaceIfElseWithSwitch";
        public const string ReplaceIncrementOperatorWithDecrementOperator = "ReplaceIncrementOperatorWithDecrementOperator";
        public const string ReplaceInterpolatedStringWithInterpolationExpression = "ReplaceInterpolatedStringWithInterpolationExpression";
        public const string ReplaceInterpolatedStringWithStringLiteral = "ReplaceInterpolatedStringWithStringLiteral";
        public const string ReplaceMethodGroupWithLambda = "ReplaceMethodGroupWithLambda";
        public const string ReplaceMethodWithProperty = "ReplaceMethodWithProperty";
        public const string ReplaceNullLiteralExpressionWithDefaultExpression = "ReplaceNullLiteralExpressionWithDefaultExpression";
        public const string ReplacePrefixOperatorWithPostfixOperator = "ReplacePrefixOperatorWithPostfixOperator";
        public const string ReplacePropertyWithMethod = "ReplacePropertyWithMethod";
        public const string ReplaceRegularStringLiteralWithVerbatimStringLiteral = "ReplaceRegularStringLiteralWithVerbatimStringLiteral";
        public const string ReplaceStatementWithIfStatement = "ReplaceStatementWithIfStatement";
        public const string ReplaceStringContainsWithStringIndexOf = "ReplaceStringContainsWithStringIndexOf";
        public const string ReplaceStringFormatWithInterpolatedString = "ReplaceStringFormatWithInterpolatedString";
        public const string ReplaceStringLiteralWithCharacterLiteral = "ReplaceStringLiteralWithCharacterLiteral";
        public const string ReplaceSwitchWithIfElse = "ReplaceSwitchWithIfElse";
        public const string ReplaceVerbatimStringLiteralWithRegularStringLiteral = "ReplaceVerbatimStringLiteralWithRegularStringLiteral";
        public const string ReplaceVerbatimStringLiteralWithRegularStringLiterals = "ReplaceVerbatimStringLiteralWithRegularStringLiterals";
        public const string ReplaceWhileStatementWithDoStatement = "ReplaceWhileStatementWithDoStatement";
        public const string ReplaceWhileWithFor = "ReplaceWhileWithFor";
        public const string ReverseForLoop = "ReverseForLoop";
        public const string SimplifyIf = "SimplifyIf";
        public const string SimplifyLambdaExpression = "SimplifyLambdaExpression";
        public const string SortMemberDeclarations = "SortMemberDeclarations";
        public const string SplitAttributes = "SplitAttributes";
        public const string SplitSwitchLabels = "SplitSwitchLabels";
        public const string SplitVariableDeclaration = "SplitVariableDeclaration";
        public const string SwapExpressionsInBinaryExpression = "SwapExpressionsInBinaryExpression";
        public const string SwapExpressionsInConditionalExpression = "SwapExpressionsInConditionalExpression";
        public const string SwapMemberDeclarations = "SwapMemberDeclarations";
        public const string SwapStatementsInIfElse = "SwapStatementsInIfElse";
        public const string Uncomment = "Uncomment";
        public const string UseBitwiseOperationInsteadOfCallingHasFlag = "UseBitwiseOperationInsteadOfCallingHasFlag";
        public const string UseCoalesceExpressionInsteadOfIf = "UseCoalesceExpressionInsteadOfIf";
        public const string UseConditionalExpressionInsteadOfIf = "UseConditionalExpressionInsteadOfIf";
        public const string UseElementAccessInsteadOfEnumerableMethod = "UseElementAccessInsteadOfEnumerableMethod";
        public const string UseEmptyStringLiteralInsteadOfStringEmpty = "UseEmptyStringLiteralInsteadOfStringEmpty";
        public const string UseExpressionBodiedMember = "UseExpressionBodiedMember";
        public const string UseLambdaExpressionInsteadOfAnonymousMethod = "UseLambdaExpressionInsteadOfAnonymousMethod";
        public const string UseStringEmptyInsteadOfEmptyStringLiteral = "UseStringEmptyInsteadOfEmptyStringLiteral";
        public const string WrapInCondition = "WrapInCondition";
        public const string WrapInElseClause = "WrapInElseClause";
        public const string WrapInIfDirective = "WrapInIfDirective";
        public const string WrapInRegion = "WrapInRegion";
        public const string WrapInTryCatch = "WrapInTryCatch";
        public const string WrapInUsingStatement = "WrapInUsingStatement";

        private static readonly Dictionary<string, string> _map = new Dictionary<string, string>()
        {
            ["RR0001"] = "AddBooleanComparison",
            ["RR0002"] = "AddBraces",
            ["RR0003"] = "AddBracesToIfElse",
            ["RR0004"] = "AddBracesToSwitchSection",
            ["RR0005"] = "AddBracesToSwitchSections",
            ["RR0006"] = "AddCastExpression",
            ["RR0007"] = "AddDefaultValueToParameter",
            ["RR0008"] = "AddDefaultValueToReturnStatement",
            ["RR0009"] = "AddExceptionToDocumentationComment",
            ["RR0010"] = "AddIdentifierToVariableDeclaration",
            ["RR0011"] = "AddParameterNameToArgument",
            ["RR0012"] = "AddParameterNameToParameter",
            ["RR0013"] = "AddUsingDirective",
            ["RR0014"] = "AddUsingStaticDirective",
            ["RR0015"] = "CallConfigureAwait",
            ["RR0016"] = "CallExtensionMethodAsInstanceMethod",
            ["RR0017"] = "CallToMethod",
            ["RR0052"] = "ChangeExplicitTypeToVar",
            ["RR0053"] = "ChangeMemberTypeAccordingToReturnExpression",
            ["RR0054"] = "ChangeMemberTypeAccordingToYieldReturnExpression",
            ["RR0055"] = "ChangeMethodReturnTypeToVoid",
            ["RR0056"] = "ChangeTypeAccordingToExpression",
            ["RR0057"] = "ChangeVarToExplicitType",
            ["RR0058"] = "CheckExpressionForNull",
            ["RR0059"] = "CheckParameterForNull",
            ["RR0018"] = "CollapseToInitializer",
            ["RR0019"] = "CommentOutMember",
            ["RR0020"] = "CommentOutStatement",
            ["RR0021"] = "CopyDocumentationCommentFromBaseMember",
            ["RR0022"] = "DuplicateArgument",
            ["RR0023"] = "DuplicateMember",
            ["RR0024"] = "DuplicateParameter",
            ["RR0025"] = "DuplicateStatement",
            ["RR0026"] = "ExpandAssignmentExpression",
            ["RR0027"] = "ExpandCoalesceExpression",
            ["RR0028"] = "ExpandEvent",
            ["RR0029"] = "ExpandExpressionBody",
            ["RR0030"] = "ExpandInitializer",
            ["RR0031"] = "ExpandLambdaExpressionBody",
            ["RR0032"] = "ExpandProperty",
            ["RR0033"] = "ExpandPropertyAndAddBackingField",
            ["RR0034"] = "ExtractDeclarationFromUsingStatement",
            ["RR0035"] = "ExtractExpressionFromCondition",
            ["RR0036"] = "ExtractGenericType",
            ["RR0037"] = "ExtractStatement",
            ["RR0038"] = "ExtractTypeDeclarationToNewFile",
            ["RR0039"] = "FormatAccessorBraces",
            ["RR0040"] = "FormatArgumentList",
            ["RR0041"] = "FormatBinaryExpression",
            ["RR0042"] = "FormatConditionalExpression",
            ["RR0043"] = "FormatExpressionChain",
            ["RR0044"] = "FormatInitializer",
            ["RR0045"] = "FormatParameterList",
            ["RR0046"] = "GenerateBaseConstructors",
            ["RR0047"] = "GenerateCombinedEnumMember",
            ["RR0048"] = "GenerateEnumMember",
            ["RR0049"] = "GenerateEnumValues",
            ["RR0050"] = "GenerateEventInvokingMethod",
            ["RR0051"] = "GenerateSwitchSections",
            ["RR0060"] = "InitializeLocalWithDefaultValue",
            ["RR0061"] = "InlineAliasExpression",
            ["RR0062"] = "InlineMethod",
            ["RR0063"] = "InsertStringInterpolation",
            ["RR0064"] = "IntroduceAndInitializeField",
            ["RR0065"] = "IntroduceAndInitializeProperty",
            ["RR0066"] = "IntroduceConstructor",
            ["RR0067"] = "IntroduceFieldToLockOn",
            ["RR0068"] = "IntroduceLocalFromStatementThatReturnsValue",
            ["RR0069"] = "MakeMemberAbstract",
            ["RR0070"] = "MakeMemberVirtual",
            ["RR0071"] = "MarkContainingClassAsAbstract",
            ["RR0072"] = "MarkMemberAsStatic",
            ["RR0073"] = "MergeAssignmentExpressionWithReturnStatement",
            ["RR0074"] = "MergeAttributes",
            ["RR0075"] = "MergeIfStatements",
            ["RR0076"] = "MergeInterpolationIntoInterpolatedString",
            ["RR0077"] = "MergeLocalDeclarations",
            ["RR0078"] = "MergeStringExpressions",
            ["RR0079"] = "NegateBinaryExpression",
            ["RR0080"] = "NegateBooleanLiteral",
            ["RR0081"] = "NegateIsExpression",
            ["RR0082"] = "NegateOperator",
            ["RR0083"] = "NotifyPropertyChanged",
            ["RR0084"] = "ParenthesizeExpression",
            ["RR0085"] = "PromoteLocalToParameter",
            ["RR0086"] = "RemoveAllComments",
            ["RR0087"] = "RemoveAllCommentsExceptDocumentationComments",
            ["RR0088"] = "RemoveAllDocumentationComments",
            ["RR0089"] = "RemoveAllMemberDeclarations",
            ["RR0090"] = "RemoveAllPreprocessorDirectives",
            ["RR0091"] = "RemoveAllRegionDirectives",
            ["RR0092"] = "RemoveAllStatements",
            ["RR0093"] = "RemoveAllSwitchSections",
            ["RR0094"] = "RemoveBraces",
            ["RR0095"] = "RemoveBracesFromIfElse",
            ["RR0096"] = "RemoveBracesFromSwitchSection",
            ["RR0097"] = "RemoveBracesFromSwitchSections",
            ["RR0098"] = "RemoveComment",
            ["RR0099"] = "RemoveConditionFromLastElse",
            ["RR0100"] = "RemoveDirectiveAndRelatedDirectives",
            ["RR0101"] = "RemoveEmptyLines",
            ["RR0102"] = "RemoveInterpolation",
            ["RR0103"] = "RemoveMember",
            ["RR0104"] = "RemoveMemberDeclarations",
            ["RR0105"] = "RemoveParameterNameFromArgument",
            ["RR0106"] = "RemoveParentheses",
            ["RR0107"] = "RemovePropertyInitializer",
            ["RR0108"] = "RemoveRegion",
            ["RR0109"] = "RemoveStatement",
            ["RR0110"] = "RemoveStatementsFromSwitchSections",
            ["RR0111"] = "RenameBackingFieldAccordingToPropertyName",
            ["RR0112"] = "RenameIdentifierAccordingToTypeName",
            ["RR0113"] = "RenameMethodAccordingToTypeName",
            ["RR0114"] = "RenameParameterAccordingToTypeName",
            ["RR0115"] = "RenamePropertyAccordingToTypeName",
            ["RR0116"] = "ReplaceAnonymousMethodWithLambdaExpression",
            ["RR0117"] = "ReplaceAnyWithAllOrAllWithAny",
            ["RR0118"] = "ReplaceAsWithCast",
            ["RR0119"] = "ReplaceCastWithAs",
            ["RR0120"] = "ReplaceConditionalExpressionWithExpression",
            ["RR0121"] = "ReplaceConditionalExpressionWithIfElse",
            ["RR0122"] = "ReplaceConstantWithField",
            ["RR0123"] = "ReplaceCountWithLengthOrLengthWithCount",
            ["RR0124"] = "ReplaceDoStatementWithWhileStatement",
            ["RR0125"] = "ReplaceEmptyStringLiteralWithStringEmpty",
            ["RR0126"] = "ReplaceEqualsExpressionWithStringEquals",
            ["RR0127"] = "ReplaceEqualsExpressionWithStringIsNullOrEmpty",
            ["RR0128"] = "ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace",
            ["RR0129"] = "ReplaceFieldWithConstant",
            ["RR0130"] = "ReplaceForEachWithFor",
            ["RR0131"] = "ReplaceForWithForEach",
            ["RR0132"] = "ReplaceForWithWhile",
            ["RR0133"] = "ReplaceHasFlagWithBitwiseOperation",
            ["RR0134"] = "ReplaceIfElseWithAssignment",
            ["RR0135"] = "ReplaceIfElseWithSwitch",
            ["RR0136"] = "ReplaceIfStatementWithReturnStatement",
            ["RR0137"] = "ReplaceIncrementOperatorWithDecrementOperator",
            ["RR0138"] = "ReplaceInterpolatedStringWithInterpolationExpression",
            ["RR0139"] = "ReplaceInterpolatedStringWithStringLiteral",
            ["RR0140"] = "ReplaceMethodGroupWithLambda",
            ["RR0141"] = "ReplaceMethodWithProperty",
            ["RR0142"] = "ReplaceNullLiteralExpressionWithDefaultExpression",
            ["RR0143"] = "ReplacePrefixOperatorWithPostfixOperator",
            ["RR0144"] = "ReplacePropertyWithMethod",
            ["RR0145"] = "ReplaceRegularStringLiteralWithVerbatimStringLiteral",
            ["RR0146"] = "ReplaceStatementWithIfStatement",
            ["RR0147"] = "ReplaceStringContainsWithStringIndexOf",
            ["RR0148"] = "ReplaceStringEmptyWithEmptyStringLiteral",
            ["RR0149"] = "ReplaceStringFormatWithInterpolatedString",
            ["RR0150"] = "ReplaceStringLiteralWithCharacterLiteral",
            ["RR0151"] = "ReplaceSwitchWithIfElse",
            ["RR0152"] = "ReplaceVerbatimStringLiteralWithRegularStringLiteral",
            ["RR0153"] = "ReplaceVerbatimStringLiteralWithRegularStringLiterals",
            ["RR0154"] = "ReplaceWhileStatementWithDoStatement",
            ["RR0155"] = "ReplaceWhileWithFor",
            ["RR0156"] = "ReverseForLoop",
            ["RR0157"] = "SimplifyLambdaExpression",
            ["RR0158"] = "SortMemberDeclarations",
            ["RR0159"] = "SplitAttributes",
            ["RR0160"] = "SplitSwitchLabels",
            ["RR0161"] = "SplitVariableDeclaration",
            ["RR0162"] = "SwapExpressionsInBinaryExpression",
            ["RR0163"] = "SwapExpressionsInConditionalExpression",
            ["RR0164"] = "SwapMemberDeclarations",
            ["RR0165"] = "SwapStatementsInIfElse",
            ["RR0166"] = "Uncomment",
            ["RR0167"] = "UseElementAccessInsteadOfEnumerableMethod",
            ["RR0168"] = "UseExpressionBodiedMember",
            ["RR0169"] = "WrapInCondition",
            ["RR0170"] = "WrapInIfDirective",
            ["RR0171"] = "WrapInRegion",
            ["RR0172"] = "WrapInTryCatch",
            ["RR0173"] = "WrapInUsingStatement"
        };

        public static bool TryGetIdentifier(string id, out string identifier)
        {
            return _map.TryGetValue(id, out identifier);
        }
    }
}