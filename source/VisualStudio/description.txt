<h3>Introduction</h3>

<p>
    A collection of 170+ analyzers and 170+ refactorings for C#, powered by Roslyn.
</p>

<h3>Links</h3>

<ul>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator">Project Website</a>
    </li>  
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator#list-of-analyzers">List of Analyzers</a>
    </li>  
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator#list-of-refactorings">List of Refactorings</a>
    </li>  
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/ChangeLog.md">Release Notes</a>
    </li>  
</ul>

<h3>Settings</h3>
<p>Analyzers can be enabled/disabled using <b>rule set</b>. Please see <a href="http://github.com/JosefPihrt/Roslynator/blob/master/docs/HowToCustomizeAnalyzers.md">How to Customize Analyzers</a>.</p>  
<p>Refactorings can be enabled/disabled in Visual Studio options.</p>  
<img src="http://pihrt.net/images/roslyn/RefactoringsOptions.png" alt="Refactorings Options">

<h3>List of Related Products</h3>

<ul>
    <li>
        <a href="http://visualstudiogallery.msdn.microsoft.com/e83c5e41-92c5-42a3-80cc-e0720c621b5e">Roslynator</a>
        <span> - Extension for Visual Studio 2015 that contains analyzers and refactorings.</span>
    </li>  
    <li>
        <a href="http://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator2017">Roslynator 2017</a>
        <span> - Extension for Visual Studio 2017 that contains analyzers and refactorings.</span>
    </li>  
    <li>
        <a href="http://visualstudiogallery.msdn.microsoft.com/a9a2b4bc-70da-437d-9ab7-b6b8e7d76cd9">Roslynator Refactorings</a>
        <span> - Extension for Visual Studio 2015 that contains only refactorings.</span>
    </li>  
    <li>
        <a href="http://marketplace.visualstudio.com/items?itemName=josefpihrt.RoslynatorRefactorings2017">Roslynator Refactorings 2017</a>
        <span> - Extension for Visual Studio 2017 that contains only refactorings.</span>
    </li>  
    <li>
        <a href="http://www.nuget.org/packages/Roslynator.Analyzers">Roslynator.Analyzers</a>
        <span> - NuGet package that contains only analyzers.</span>
        <span> - This package supersedes package CSharpAnalyzers.</span>
        <span> - This package cannot be used with Visual Studio 2015.</span>
    </li>  
    <li>
        <a href="http://www.nuget.org/packages/CSharpAnalyzers">CSharpAnalyzers</a>
        <span> - NuGet package that contains only analyzers.</span>
    </li>  
</ul>
<h3>List of Analyzers</h3>
<ul>
    <li>RCS1001 - Add braces.</li>
    <li>RCS1002 - Remove braces.</li>
    <li>RCS1003 - Add braces to if-else.</li>
    <li>RCS1004 - Remove braces from if-else.</li>
    <li>RCS1005 - Simplify nested using statement.</li>
    <li>RCS1006 - Merge else clause with nested if statement.</li>
    <li>RCS1007 - Avoid embedded statement.</li>
    <li>RCS1008 - Use explicit type instead of 'var' (when the type is not obvious).</li>
    <li>RCS1009 - Use explicit type instead of 'var' (foreach variable).</li>
    <li>RCS1010 - Use 'var' instead of explicit type (when the type is obvious).</li>
    <li>RCS1012 - Use explicit type instead of 'var' (even if the type is obvious).</li>
    <li>RCS1013 - Use predefined type.</li>
    <li>RCS1014 - Avoid implicitly-typed array.</li>
    <li>RCS1015 - Use nameof operator.</li>
    <li>RCS1016 - Use expression-bodied member.</li>
    <li>RCS1017 - Avoid multiline expression body.</li>
    <li>RCS1018 - Add default access modifier.</li>
    <li>RCS1019 - Reorder modifiers.</li>
    <li>RCS1020 - Simplify Nullable&lt;T&gt; to T?.</li>
    <li>RCS1021 - Simplify lambda expression.</li>
    <li>RCS1022 - Simplify lambda expression parameter list.</li>
    <li>RCS1023 - Format empty block.</li>
    <li>RCS1024 - Format accessor list.</li>
    <li>RCS1025 - Format each enum member on a separate line.</li>
    <li>RCS1026 - Format each statement on a separate line.</li>
    <li>RCS1027 - Format embedded statement on a separate line.</li>
    <li>RCS1028 - Format switch section's statement on a separate line.</li>
    <li>RCS1029 - Format binary operator on next line.</li>
    <li>RCS1030 - Add empty line after embedded statement.</li>
    <li>RCS1032 - Remove redundant parentheses.</li>
    <li>RCS1033 - Remove redundant boolean literal.</li>
    <li>RCS1034 - Remove redundant sealed modifier.</li>
    <li>RCS1035 - Remove redundant comma in initializer.</li>
    <li>RCS1036 - Remove redundant empty line.</li>
    <li>RCS1037 - Remove trailing white-space.</li>
    <li>RCS1038 - Remove empty statement.</li>
    <li>RCS1039 - Remove empty attribute argument list.</li>
    <li>RCS1040 - Remove empty else clause.</li>
    <li>RCS1041 - Remove empty initializer.</li>
    <li>RCS1042 - Remove enum default underlying type.</li>
    <li>RCS1043 - Remove partial modifier from type with a single part.</li>
    <li>RCS1044 - Remove original exception from throw statement.</li>
    <li>RCS1045 - Rename private field according to camel case with underscore.</li>
    <li>RCS1046 - Asynchronous method name should end with 'Async'.</li>
    <li>RCS1047 - Non-asynchronous method name should not end with 'Async'.</li>
    <li>RCS1048 - Use lambda expression instead of anonymous method.</li>
    <li>RCS1049 - Simplify boolean comparison.</li>
    <li>RCS1050 - Add constructor argument list.</li>
    <li>RCS1051 - Parenthesize condition in conditional expression.</li>
    <li>RCS1052 - Declare each attribute separately.</li>
    <li>RCS1054 - Merge local declaration with return statement.</li>
    <li>RCS1055 - Avoid semicolon at the end of declaration.</li>
    <li>RCS1056 - Avoid usage of using alias directive.</li>
    <li>RCS1057 - Add empty line between declarations.</li>
    <li>RCS1058 - Use compound assignment.</li>
    <li>RCS1059 - Avoid locking on publicly accessible instance.</li>
    <li>RCS1060 - Declare each type in separate file.</li>
    <li>RCS1061 - Merge if statement with nested if statement.</li>
    <li>RCS1062 - Avoid interpolated string with no interpolation.</li>
    <li>RCS1063 - Avoid usage of do statement to create an infinite loop.</li>
    <li>RCS1064 - Avoid usage of for statement to create an infinite loop.</li>
    <li>RCS1065 - Avoid usage of while statement to create an inifinite loop.</li>
    <li>RCS1066 - Remove empty finally clause.</li>
    <li>RCS1067 - Remove empty argument list.</li>
    <li>RCS1068 - Simplify logical not expression.</li>
    <li>RCS1069 - Remove unnecessary case label.</li>
    <li>RCS1070 - Remove redundant default switch section.</li>
    <li>RCS1071 - Remove redundant base constructor call.</li>
    <li>RCS1072 - Remove empty namespace declaration.</li>
    <li>RCS1073 - Replace if statement with return statement.</li>
    <li>RCS1074 - Remove redundant constructor.</li>
    <li>RCS1075 - Avoid empty catch clause that catches System.Exception.</li>
    <li>RCS1076 - Format declaration braces.</li>
    <li>RCS1077 - Simplify LINQ method chain.</li>
    <li>RCS1078 - Use "" instead of string.Empty.</li>
    <li>RCS1079 - Throwing of new NotImplementedException.</li>
    <li>RCS1080 - Use 'Count/Length' property instead of 'Any' method.</li>
    <li>RCS1081 - Split variable declaration.</li>
    <li>RCS1082 - Use 'Count/Length' property instead of 'Count' method.</li>
    <li>RCS1083 - Use 'Any' method instead of 'Count' method.</li>
    <li>RCS1084 - Use coalesce expression instead of conditional expression.</li>
    <li>RCS1085 - Use auto-implemented property instead of expanded property.</li>
    <li>RCS1086 - Use linefeed as newline.</li>
    <li>RCS1087 - Use carriage return + linefeed as newline.</li>
    <li>RCS1088 - Use space(s) instead of tab.</li>
    <li>RCS1089 - Use postfix unary operator instead of assignment.</li>
    <li>RCS1090 - Call 'ConfigureAwait(false)'.</li>
    <li>RCS1091 - Remove empty region.</li>
    <li>RCS1092 - Add empty line after last statement in do statement.</li>
    <li>RCS1093 - Remove file with no code.</li>
    <li>RCS1094 - Declare using directive on top level.</li>
    <li>RCS1095 - Use C# 6.0 dictionary initializer.</li>
    <li>RCS1096 - Use bitwise operation instead of calling 'HasFlag'.</li>
    <li>RCS1097 - Remove redundant 'ToString' call.</li>
    <li>RCS1098 - Avoid 'null' on the left side of a binary expression.</li>
    <li>RCS1099 - Default label should be last label in switch section.</li>
    <li>RCS1100 - Format documentation summary on a single line.</li>
    <li>RCS1101 - Format documentation summary on multiple lines.</li>
    <li>RCS1102 - Mark class as static.</li>
    <li>RCS1103 - Replace if statement with assignment.</li>
    <li>RCS1104 - Simplify conditional expression.</li>
    <li>RCS1105 - Merge interpolation into interpolated string.</li>
    <li>RCS1106 - Remove empty destructor.</li>
    <li>RCS1107 - Remove redundant 'ToCharArray' call.</li>
    <li>RCS1108 - Add static modifier to all partial class declarations.</li>
    <li>RCS1109 - Use 'Cast' method instead of 'Select' method.</li>
    <li>RCS1110 - Declare type inside namespace.</li>
    <li>RCS1111 - Add braces to switch section with multiple statements.</li>
    <li>RCS1112 - Combine 'Enumerable.Where' method chain.</li>
    <li>RCS1113 - Use 'string.IsNullOrEmpty' method.</li>
    <li>RCS1114 - Remove redundant delegate creation.</li>
    <li>RCS1115 - Replace yield/return statement with expression statement.</li>
    <li>RCS1116 - Add break statement to switch section.</li>
    <li>RCS1117 - Add return statement that returns default value.</li>
    <li>RCS1118 - Mark local variable as const.</li>
    <li>RCS1119 - Call 'Find' method instead of 'FirstOrDefault' method.</li>
    <li>RCS1120 - Use [] instead of calling 'ElementAt'.</li>
    <li>RCS1121 - Use [] instead of calling 'First'.</li>
    <li>RCS1122 - Add missing semicolon.</li>
    <li>RCS1123 - Add parentheses according to operator precedence.</li>
    <li>RCS1124 - Inline local variable.</li>
    <li>RCS1125 - Mark member as static.</li>
    <li>RCS1126 - Avoid embedded statement in if-else.</li>
    <li>RCS1127 - Merge local declaration with initialization.</li>
    <li>RCS1128 - Use coalesce expression.</li>
    <li>RCS1129 - Remove redundant field initalization.</li>
    <li>RCS1130 - Bitwise operation on enum without Flags attribute.</li>
    <li>RCS1131 - Replace return with yield return.</li>
    <li>RCS1132 - Remove redundant overriding member.</li>
    <li>RCS1133 - Remove redundant Dispose/Close call.</li>
    <li>RCS1134 - Remove redundant continue statement.</li>
    <li>RCS1135 - Declare enum member with zero value (when enum has FlagsAttribute).</li>
    <li>RCS1136 - Merge switch sections with equivalent content.</li>
    <li>RCS1137 - Add documentation comment to publicly visible type or member.</li>
    <li>RCS1138 - Add summary to documentation comment.</li>
    <li>RCS1139 - Add summary element to documentation comment.</li>
    <li>RCS1140 - Add exception to documentation comment.</li>
    <li>RCS1141 - Add parameter to documentation comment.</li>
    <li>RCS1142 - Add type parameter to documentation comment.</li>
    <li>RCS1143 - Simplify coalesce expression.</li>
    <li>RCS1144 - Mark containing class as abstract.</li>
    <li>RCS1145 - Remove redundant 'as' operator.</li>
    <li>RCS1146 - Use conditional access.</li>
    <li>RCS1147 - Remove inapplicable modifier.</li>
    <li>RCS1148 - Remove unreachable code.</li>
    <li>RCS1149 - Remove implementation from abstract member.</li>
    <li>RCS1150 - Call string.Concat instead of string.Join.</li>
    <li>RCS1151 - Remove redundant cast.</li>
    <li>RCS1152 - Member type must match overriden member type.</li>
    <li>RCS1153 - Add empty line after closing brace.</li>
    <li>RCS1154 - Sort enum members.</li>
    <li>RCS1155 - Use StringComparison when comparing strings.</li>
    <li>RCS1156 - Use string.Length instead of comparison with empty string.</li>
    <li>RCS1157 - Composite enum value contains undefined flag.</li>
    <li>RCS1158 - Avoid static members in generic types.</li>
    <li>RCS1159 - Use EventHandler&lt;T&gt;.</li>
    <li>RCS1160 - Abstract type should not have public constructors.</li>
    <li>RCS1161 - Enum member should declare explicit value.</li>
    <li>RCS1162 - Avoid chain of assignments.</li>
    <li>RCS1163 - Unused parameter.</li>
    <li>RCS1164 - Unused type parameter.</li>
    <li>RCS1165 - Unconstrained type parameter checked for null.</li>
    <li>RCS1166 - Value type checked for null.</li>
    <li>RCS1167 - Overriding member cannot change access modifiers.</li>
    <li>RCS1168 - Parameter name differs from base name.</li>
    <li>RCS1169 - Mark field as read-only.</li>
    <li>RCS1170 - Use read-only auto-implemented property.</li>
    <li>RCS1171 - Simplify lazily initialized property.</li>
    <li>RCS1172 - Use is operator instead of as operator.</li>
    <li>RCS1173 - Use coalesce expression instead of if.</li>
    <li>RCS1174 - Remove redundant async/await.</li>
</ul>
<h3>List of Refactorings</h3>
<ul>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-boolean-comparison">Add boolean comparison</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-braces">Add braces</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-braces-to-if-else">Add braces to if-else</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-braces-to-switch-section">Add braces to switch section</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-braces-to-switch-sections">Add braces to switch sections</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-cast-expression">Add cast expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-default-value-to-parameter">Add default value to parameter</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-default-value-to-return-statement">Add default value to return statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-exception-to-documentation-comment">Add exception to documentation comment</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-identifier-to-variable-declaration">Add identifier to variable declaration</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-parameter-name-to-argument">Add parameter name to argument</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-parameter-name-to-parameter">Add parameter name to parameter</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-using-directive">Add using directive</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#add-using-static-directive">Add using static directive</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#call-configureawaitfalse">Call 'ConfigureAwait(false)'</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#call-extension-method-as-instance-method">Call extension method as instance method</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#call-to-method-tostring-toarray-tolist">Call 'To...' method (ToString, ToArray, ToList)</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#change-explicit-type-to-var">Change explicit type to 'var'</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#change-method-return-type-to-void">Change method return type to 'void'</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#change-methodpropertyindexer-type-according-to-return-expression">Change method/property/indexer type according to return expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#change-methodpropertyindexer-type-according-to-yield-return-expression">Change method/property/indexer type according to yield return expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#change-type-according-to-expression">Change type according to expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#change-var-to-explicit-type">Change 'var' to explicit type</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#check-expression-for-null">Check expression for null</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#check-parameter-for-null">Check parameter for null</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#collapse-to-initalizer">Collapse to initalizer</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#comment-out-member">Comment out member</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#comment-out-statement">Comment out statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#copy-documentation-comment-from-base-member">Copy documentation comment from base member</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#duplicate-argument">Duplicate argument</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#duplicate-member">Duplicate member</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#duplicate-parameter">Duplicate parameter</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#duplicate-statement">Duplicate statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-assignment-expression">Expand assignment expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-coalesce-expression">Expand coalesce expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-event">Expand event</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-expression-body">Expand expression body</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-initializer">Expand initializer</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-lambda-expression-body">Expand lambda expression body</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-property">Expand property</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#expand-property-and-add-backing-field">Expand property and add backing field</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#extract-declaration-from-using-statement">Extract declaration from using statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#extract-expression-from-condition">Extract expression from condition</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#extract-generic-type">Extract generic type</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#extract-statements">Extract statement(s)</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#extract-type-declaration-to-a-new-file">Extract type declaration to a new file</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#format-accessor-braces">Format accessor braces</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#format-argument-list">Format argument list</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#format-binary-expression">Format binary expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#format-conditional-expression">Format conditional expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#format-expression-chain">Format expression chain</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#format-initializer">Format initializer</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#format-parameter-list">Format parameter list</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#generate-base-constructors">Generate base constructors</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#generate-combined-enum-member">Generate combined enum member</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#generate-enum-member">Generate enum member</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#generate-enum-values">Generate enum values</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#generate-event-invoking-method">Generate event invoking method</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#generate-switch-sections">Generate switch sections</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#initialize-local-with-default-value">Initialize local with default value</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#inline-alias-expression">Inline alias expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#inline-method">Inline method</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#insert-string-interpolation">Insert string interpolation</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#introduce-and-initialize-field">Introduce and initialize field</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#introduce-and-initialize-property">Introduce and initialize property</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#introduce-constructor">Introduce constructor</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#introduce-field-to-lock-on">Introduce field to lock on</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#introduce-local-from-statement-that-returns-value">Introduce local from statement that returns value</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#make-member-abstract">Make member abstract</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#make-member-virtual">Make member virtual</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#mark-containing-class-as-abstract">Mark containing class as abstract</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#mark-member-as-static">Mark member as static</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#merge-assignment-expression-with-return-statement">Merge assignment expression with return statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#merge-attributes">Merge attributes</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#merge-if-statements">Merge if statements</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#merge-interpolation-into-interpolated-string">Merge interpolation into interpolated string</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#merge-local-declarations">Merge local declarations</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#merge-string-expressions">Merge string expressions</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#negate-binary-expression">Negate binary expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#negate-boolean-literal">Negate boolean literal</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#negate-is-expression">Negate is expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#negate-operator">Negate operator</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#notify-property-changed">Notify property changed</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#parenthesize-expression">Parenthesize expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#promote-local-to-parameter">Promote local to parameter</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-comments">Remove all comments</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-comments-except-documentation-comments">Remove all comments (except documentation comments)</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-documentation-comments">Remove all documentation comments</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-member-declarations">Remove all member declarations</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-preprocessor-directives">Remove all preprocessor directives</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-region-directives">Remove all region directives</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-statements">Remove all statements</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-all-switch-sections">Remove all switch sections</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-braces">Remove braces</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-braces-from-if-else">Remove braces from if-else</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-braces-from-switch-section">Remove braces from switch section</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-braces-from-switch-sections">Remove braces from switch sections</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-comment">Remove comment</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-condition-from-last-else-clause">Remove condition from last else clause</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-directive-and-related-directives">Remove directive and related directives</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-empty-lines">Remove empty lines</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-interpolation">Remove interpolation</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-member">Remove member</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-member-declarations-abovebelow">Remove member declarations above/below</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-parameter-name-from-argument">Remove parameter name from argument</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-parentheses">Remove parentheses</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-property-initializer">Remove property initializer</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-region">Remove region</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-statement">Remove statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#remove-statements-from-switch-sections">Remove statements from switch sections</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#rename-backing-field-according-to-property-name">Rename backing field according to property name</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#rename-identifier-according-to-type-name">Rename identifier according to type name</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#rename-method-according-to-type-name">Rename method according to type name</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#rename-parameter-according-to-its-type-name">Rename parameter according to its type name</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#rename-property-according-to-type-name">Rename property according to type name</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-any-with-all-or-all-with-any">Replace Any with All (or All with Any)</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-as-expression-with-cast-expression">Replace as expression with cast expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-cast-expression-with-as-expression">Replace cast expression with as expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-conditional-expression-with-expression">Replace conditional expression with expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-conditional-expression-with-if-else">Replace conditional expression with if-else</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-constant-with-field">Replace constant with field</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-count-property-with-length-property-or-length-with-count">Replace Count property with Length property (or Length with Count)</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-do-statement-with-while-statement">Replace do statement with while statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-equals-expression-with-stringequals">Replace equals expression with String.Equals</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-equals-expression-with-stringisnullorempty">Replace equals expression with String.IsNullOrEmpty</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-equals-expression-with-stringisnullorwhitespace">Replace equals expression with String.IsNullOrWhiteSpace</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-expression-with-constant-value">Replace expression with constant value</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-field-with-constant">Replace field with constant</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-for-statement-with-foreach-statement">Replace for statement with foreach statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-for-statement-with-while-statement">Replace for statement with while statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-foreach-statement-with-for-statement">Replace foreach statement with for statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-hexadecimal-literal-with-decimal-literal">Replace hexadecimal literal with decimal literal</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-if-else-with-switch-statement">Replace if-else with switch statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-increment-operator-with-decrement-operator">Replace increment operator with decrement operator</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-interpolated-string-with-interpolation-expression">Replace interpolated string with interpolation expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-interpolated-string-with-string-literal">Replace interpolated string with string literal</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-method-group-with-lambda">Replace method group with lambda</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-method-with-property">Replace method with property</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-null-literal-expression-with-default-expression">Replace null literal expression with default expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-prefix-operator-to-postfix-operator">Replace prefix operator to postfix operator</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-property-with-method">Replace property with method</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-regular-string-literal-with-verbatim-string-literal">Replace regular string literal with verbatim string literal</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-statement-with-if-statement">Replace statement with if statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-string-literal-with-character-literal">Replace string literal with character literal</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-stringcontains-with-stringindexof">Replace String.Contains with String.IndexOf</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-stringformat-with-interpolated-string">Replace String.Format with interpolated string</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-switch-statement-with-if-else">Replace switch statement with if-else</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-verbatim-string-literal-with-regular-string-literal">Replace verbatim string literal with regular string literal</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-verbatim-string-literal-with-regular-string-literals">Replace verbatim string literal with regular string literals</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-while-statement-with-do-statement">Replace while statement with do statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#replace-while-statement-with-for-statement">Replace while statement with for statement</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#reverse-for-loop">Reverse for loop</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#simplify-if">Simplify if</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#simplify-lambda-expression">Simplify lambda expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#sort-member-declarations">Sort member declarations</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#split-attributes">Split attributes</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#split-switch-labels">Split switch labels</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#split-variable-declaration">Split variable declaration</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#swap-expressions-in-binary-expression">Swap expressions in binary expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#swap-expressions-in-conditional-expression">Swap expressions in conditional expression</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#swap-member-declarations">Swap member declarations</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#swap-statements-in-if-else">Swap statements in if-else</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#uncomment">Uncomment</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use--instead-of-stringempty">Use "" instead of String.Empty</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use-bitwise-operation-instead-of-calling-hasflag">Use bitwise operation instead of calling 'HasFlag'</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use-coalesce-expression-instead-of-if">Use coalesce expression instead of if</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use-conditional-expression-instead-of-if">Use conditional expression instead of if</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use-element-access-instead-of-firstlastelementat-method">Use element access instead of 'First/Last'ElementAt' method</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use-expression-bodied-member">Use expression-bodied member</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use-lambda-expression-instead-of-anonymous-method">Use lambda expression instead of anonymous method</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#use-stringempty-instead-of-">Use String.Empty instead of ""</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#wrap-in-if-directive">Wrap in #if directive</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#wrap-in-condition">Wrap in condition</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#wrap-in-else-clause">Wrap in else clause</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#wrap-in-region">Wrap in region</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#wrap-in-try-catch">Wrap in try-catch</a>
    </li>
    <li>
        <a href="http://github.com/JosefPihrt/Roslynator/blob/master/source/Refactorings/Refactorings.md#wrap-in-using-statement">Wrap in using statement</a>
    </li>
</ul>